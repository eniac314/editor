var _user$project$ElmParser$trimQuot = function (s) {
	return A2(
		_elm_lang$core$String$dropRight,
		1,
		A2(_elm_lang$core$String$dropLeft, 1, s));
};
var _user$project$ElmParser$consumerLS = function (xs) {
	var _p0 = xs;
	if (_p0.ctor === '[]') {
		return _elm_lang$core$Result$Err('no more tokens');
	} else {
		return _elm_lang$core$Result$Ok(
			{ctor: '_Tuple2', _0: _p0._0, _1: _p0._1});
	}
};
var _user$project$ElmParser$token = function (s) {
	return A2(
		_user$project$BetterParser$sat,
		_user$project$ElmParser$consumerLS,
		function (t) {
			return _elm_lang$core$Native_Utils.eq(
				function (_) {
					return _.val;
				}(t),
				s);
		});
};
var _user$project$ElmParser$coma = function (p) {
	return A2(
		_user$project$BetterParser_ops['+++'],
		p,
		A2(
			_user$project$BetterParser_ops['>>*'],
			_user$project$ElmParser$token(','),
			p));
};
var _user$project$ElmParser$parseTagName = A2(
	_user$project$BetterParser_ops['>>='],
	_user$project$BetterParser$item(_user$project$ElmParser$consumerLS),
	function (v) {
		var _p1 = A2(
			_elm_lang$core$Dict$get,
			function (_) {
				return _.val;
			}(v),
			_user$project$TagAttr$tagnames);
		if (_p1.ctor === 'Nothing') {
			return _user$project$BetterParser$failure(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid tag name: ',
					_user$project$Tokenizer$tokError(v)));
		} else {
			return _user$project$BetterParser$return(_p1._0);
		}
	});
var _user$project$ElmParser$parseAttrName = A2(
	_user$project$BetterParser_ops['>>='],
	_user$project$BetterParser$item(_user$project$ElmParser$consumerLS),
	function (v) {
		var _p2 = A2(
			_elm_lang$core$Dict$get,
			function (_) {
				return _.val;
			}(v),
			_user$project$TagAttr$attrnames);
		if (_p2.ctor === 'Nothing') {
			return _user$project$BetterParser$failure(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid attribute name: ',
					_user$project$Tokenizer$tokError(v)));
		} else {
			return _user$project$BetterParser$return(_p2._0);
		}
	});
var _user$project$ElmParser$parseStringLiteral = A2(
	_user$project$BetterParser_ops['>>='],
	A2(
		_user$project$BetterParser$sat,
		_user$project$ElmParser$consumerLS,
		function (t) {
			return A2(
				_elm_lang$core$String$startsWith,
				'\"',
				function (_) {
					return _.val;
				}(t)) && A2(
				_elm_lang$core$String$endsWith,
				'\"',
				function (_) {
					return _.val;
				}(t));
		}),
	function (res) {
		return _user$project$BetterParser$return(
			_user$project$ElmParser$trimQuot(
				function (_) {
					return _.val;
				}(res)));
	});
var _user$project$ElmParser$parseStyle = function () {
	var parseTuple = A2(
		_user$project$BetterParser_ops['>>='],
		A2(
			_user$project$BetterParser_ops['>>*'],
			_user$project$ElmParser$token('('),
			_user$project$ElmParser$parseStringLiteral),
		function (v1) {
			return A2(
				_user$project$BetterParser_ops['>>='],
				A2(
					_user$project$BetterParser_ops['>>*'],
					_user$project$ElmParser$token(','),
					_user$project$ElmParser$parseStringLiteral),
				function (v2) {
					return A2(
						_user$project$BetterParser_ops['>>*'],
						_user$project$ElmParser$token(')'),
						_user$project$BetterParser$return(
							{ctor: '_Tuple2', _0: v1, _1: v2}));
				});
		});
	return A2(
		_user$project$BetterParser_ops['>>='],
		A2(
			_user$project$BetterParser_ops['>>*'],
			A2(
				_user$project$BetterParser_ops['>>*'],
				_user$project$ElmParser$token('style'),
				_user$project$ElmParser$token('[')),
			A3(
				_user$project$BetterParser$many,
				_user$project$ElmParser$coma(parseTuple),
				{ctor: '[]'},
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}))),
		function (res) {
			return A2(
				_user$project$BetterParser_ops['>>*'],
				_user$project$ElmParser$token(']'),
				_user$project$BetterParser$return(
					_user$project$TagAttr$Style(res)));
		});
}();
var _user$project$ElmParser$parseAttr = A2(
	_user$project$BetterParser_ops['+++'],
	A2(
		_user$project$BetterParser_ops['>>='],
		_user$project$ElmParser$coma(_user$project$ElmParser$parseAttrName),
		function (an) {
			return A2(
				_user$project$BetterParser_ops['>>='],
				_user$project$ElmParser$parseStringLiteral,
				function (s) {
					return _user$project$BetterParser$return(
						an(s));
				});
		}),
	_user$project$ElmParser$coma(_user$project$ElmParser$parseStyle));
var _user$project$ElmParser$parseAttrList = A2(
	_user$project$BetterParser_ops['>>='],
	A2(
		_user$project$BetterParser_ops['>>*'],
		_user$project$ElmParser$token('['),
		A3(
			_user$project$BetterParser$many,
			_user$project$ElmParser$parseAttr,
			{ctor: '[]'},
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}))),
	function (res) {
		return A2(
			_user$project$BetterParser_ops['>>*'],
			_user$project$ElmParser$token(']'),
			_user$project$BetterParser$return(res));
	});
var _user$project$ElmParser$parseText = F2(
	function (path, n) {
		return A2(
			_user$project$BetterParser_ops['>>='],
			A2(
				_user$project$BetterParser_ops['>>*'],
				A2(
					_user$project$BetterParser$sat,
					_user$project$ElmParser$consumerLS,
					function (t) {
						return _elm_lang$core$Native_Utils.eq(
							function (_) {
								return _.val;
							}(t),
							'text');
					}),
				_user$project$ElmParser$parseStringLiteral),
			function (s) {
				return _user$project$BetterParser$return(
					{
						ctor: '_Tuple2',
						_0: A2(
							_user$project$HtmlZipper$Node,
							A3(
								_user$project$HtmlZipper$Tag,
								_user$project$TagAttr$Text(s),
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _user$project$TagAttr$TextNode, _1: n},
									_1: path
								},
								{ctor: '[]'}),
							{ctor: '[]'}),
						_1: n
					});
			});
	});
var _user$project$ElmParser$parseMarkdown = F2(
	function (path, n) {
		return A2(
			_user$project$BetterParser_ops['>>='],
			A2(
				_user$project$BetterParser_ops['>>*'],
				A2(
					_user$project$BetterParser$sat,
					_user$project$ElmParser$consumerLS,
					function (t) {
						return _elm_lang$core$Native_Utils.eq(
							function (_) {
								return _.val;
							}(t),
							'markdown');
					}),
				_user$project$ElmParser$parseStringLiteral),
			function (s) {
				return _user$project$BetterParser$return(
					{
						ctor: '_Tuple2',
						_0: A2(
							_user$project$HtmlZipper$Node,
							A3(
								_user$project$HtmlZipper$Tag,
								_user$project$TagAttr$Markdown(s),
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _user$project$TagAttr$MarkdownNode, _1: n},
									_1: path
								},
								{ctor: '[]'}),
							{ctor: '[]'}),
						_1: n
					});
			});
	});
var _user$project$ElmParser$parseTag = F2(
	function (path, n) {
		return A2(
			_user$project$BetterParser_ops['+++'],
			A2(
				_user$project$BetterParser_ops['+++'],
				_user$project$ElmParser$coma(
					A2(_user$project$ElmParser$parseText, path, n)),
				_user$project$ElmParser$coma(
					A2(_user$project$ElmParser$parseMarkdown, path, n))),
			A2(
				_user$project$BetterParser_ops['>>='],
				_user$project$ElmParser$coma(_user$project$ElmParser$parseTagName),
				function (tn) {
					return A2(
						_user$project$BetterParser_ops['>>='],
						_user$project$ElmParser$parseAttrList,
						function (al) {
							return A2(
								_user$project$BetterParser_ops['>>='],
								A2(
									_user$project$ElmParser$parseTagList,
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: tn, _1: n},
										_1: path
									},
									n),
								function (_p3) {
									var _p4 = _p3;
									return _user$project$BetterParser$return(
										{
											ctor: '_Tuple2',
											_0: A2(
												_user$project$HtmlZipper$Node,
												A3(
													_user$project$HtmlZipper$Tag,
													tn,
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: tn, _1: n},
														_1: path
													},
													al),
												_p4._0),
											_1: _p4._1
										});
								});
						});
				}));
	});
var _user$project$ElmParser$parseTagList = F2(
	function (path, n) {
		return A2(
			_user$project$BetterParser_ops['>>='],
			A2(
				_user$project$BetterParser_ops['>>*'],
				_user$project$ElmParser$token('['),
				A4(
					_user$project$BetterParser$many_,
					function (_p5) {
						var _p6 = _p5;
						return A2(
							_user$project$BetterParser_ops['>>='],
							A2(_user$project$ElmParser$parseTag, path, _p6._1 + 1),
							function (_p7) {
								var _p8 = _p7;
								return _user$project$BetterParser$return(
									{
										ctor: '_Tuple2',
										_0: {
											ctor: '::',
											_0: _p8._0,
											_1: {ctor: '[]'}
										},
										_1: _p8._1
									});
							});
					},
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: n
					},
					F2(
						function (_p10, _p9) {
							var _p11 = _p10;
							var _p12 = _p9;
							return {
								ctor: '_Tuple2',
								_0: A2(_elm_lang$core$Basics_ops['++'], _p11._0, _p12._0),
								_1: _p12._1
							};
						}),
					{ctor: '[]'})),
			function (res) {
				return A2(
					_user$project$BetterParser_ops['>>*'],
					_user$project$ElmParser$token(']'),
					_user$project$BetterParser$return(res));
			});
	});
var _user$project$ElmParser$zero = 0;
var _user$project$ElmParser$interpret = F2(
	function (input, n) {
		var _p13 = _user$project$Tokenizer$tokenizer(input);
		if (_p13.ctor === 'Err') {
			return _elm_lang$core$Result$Err(
				A2(_elm_lang$core$Basics_ops['++'], 'Tokenizer error: ', _p13._0));
		} else {
			var _p14 = A2(
				_user$project$BetterParser$parse,
				A2(
					_user$project$ElmParser$parseTag,
					{ctor: '[]'},
					n),
				_p13._0);
			if (_p14.ctor === 'Err') {
				return _elm_lang$core$Result$Err(
					A2(_elm_lang$core$Basics_ops['++'], 'Parser error: ', _p14._0));
			} else {
				return _elm_lang$core$Native_Utils.eq(
					_p14._0._1,
					{ctor: '[]'}) ? _elm_lang$core$Result$Ok(_p14._0._0) : _elm_lang$core$Result$Err('Parser error: unprocessed input');
			}
		}
	});
