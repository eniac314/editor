var _Dandandan$parser$Parser_Number$fromOk = F2(
	function ($default, result) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			$default,
			_elm_lang$core$Result$toMaybe(result));
	});
var _Dandandan$parser$Parser_Number$sign = function () {
	var min = A2(
		_Dandandan$parser$Parser$map,
		_elm_lang$core$Basics$always(1),
		_Dandandan$parser$Parser$symbol(
			_elm_lang$core$Native_Utils.chr('+')));
	var plus = A2(
		_Dandandan$parser$Parser$map,
		_elm_lang$core$Basics$always(-1),
		_Dandandan$parser$Parser$symbol(
			_elm_lang$core$Native_Utils.chr('-')));
	return A2(
		_Dandandan$parser$Parser$optional,
		A2(_Dandandan$parser$Parser$or, plus, min),
		1);
}();
var _Dandandan$parser$Parser_Number$digit = function () {
	var charToInt = function (c) {
		return _elm_lang$core$Char$toCode(c) - _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('0'));
	};
	return A2(
		_Dandandan$parser$Parser$map,
		charToInt,
		_Dandandan$parser$Parser$satisfy(_elm_lang$core$Char$isDigit));
}();
var _Dandandan$parser$Parser_Number$natural = A2(
	_Dandandan$parser$Parser$map,
	A2(
		_elm_lang$core$List$foldl,
		F2(
			function (b, a) {
				return (a * 10) + b;
			}),
		0),
	_Dandandan$parser$Parser$some(_Dandandan$parser$Parser_Number$digit));
var _Dandandan$parser$Parser_Number$integer = A2(
	_Dandandan$parser$Parser$andMap,
	_Dandandan$parser$Parser_Number$natural,
	A2(
		_Dandandan$parser$Parser$map,
		F2(
			function (x, y) {
				return x * y;
			}),
		_Dandandan$parser$Parser_Number$sign));
var _Dandandan$parser$Parser_Number$float = function () {
	var toFloatString = function (_p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(_p1._0),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'.',
				_elm_lang$core$String$concat(
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, _p1._1))));
	};
	var convertToFloat = F3(
		function (sig, $int, digs) {
			return _elm_lang$core$Basics$toFloat(sig) * function (_p2) {
				return A2(
					_Dandandan$parser$Parser_Number$fromOk,
					0.0,
					_elm_lang$core$String$toFloat(
						toFloatString(_p2)));
			}(
				{ctor: '_Tuple2', _0: $int, _1: digs});
		});
	return A2(
		_Dandandan$parser$Parser$andMap,
		A2(
			_Dandandan$parser$Parser_ops['*>'],
			_Dandandan$parser$Parser$symbol(
				_elm_lang$core$Native_Utils.chr('.')),
			_Dandandan$parser$Parser$some(_Dandandan$parser$Parser_Number$digit)),
		A2(
			_Dandandan$parser$Parser$andMap,
			_Dandandan$parser$Parser_Number$integer,
			A2(_Dandandan$parser$Parser$map, convertToFloat, _Dandandan$parser$Parser_Number$sign)));
}();
