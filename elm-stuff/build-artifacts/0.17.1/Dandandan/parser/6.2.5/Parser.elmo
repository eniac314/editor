var _Dandandan$parser$Parser$funP = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Direct') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _Dandandan$parser$Parser$parse = F2(
	function (p, xs) {
		var _p1 = A2(_Dandandan$parser$Parser$funP, p, xs);
		if (_p1.ctor === '[]') {
			return _elm_lang$core$Result$Err('parse error');
		} else {
			return _elm_lang$core$Result$Ok(
				_elm_lang$core$Basics$fst(_p1._0));
		}
	});
var _Dandandan$parser$Parser$parseAll = F2(
	function (p, xs) {
		var _p2 = A2(_Dandandan$parser$Parser$funP, p, xs);
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Result$Err('parse error');
		} else {
			return _elm_lang$core$Result$Ok(
				A2(_elm_lang$core$List$map, _elm_lang$core$Basics$fst, _p2));
		}
	});
var _Dandandan$parser$Parser$Delayed = function (a) {
	return {ctor: 'Delayed', _0: a};
};
var _Dandandan$parser$Parser$recursively = function (t) {
	return function (_p3) {
		return _Dandandan$parser$Parser$Delayed(
			_elm_lang$lazy$Lazy$lazy(_p3));
	}(
		function (_p4) {
			var _p5 = _p4;
			return _Dandandan$parser$Parser$funP(
				t(
					{ctor: '_Tuple0'}));
		});
};
var _Dandandan$parser$Parser$Direct = function (a) {
	return {ctor: 'Direct', _0: a};
};
var _Dandandan$parser$Parser$succeed = function (b) {
	return _Dandandan$parser$Parser$Direct(
		function (xs) {
			return _elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: b, _1: xs}
				]);
		});
};
var _Dandandan$parser$Parser$satisfy = function (p) {
	return _Dandandan$parser$Parser$Direct(
		function (xs) {
			var _p6 = _elm_lang$core$String$uncons(xs);
			if (_p6.ctor === 'Nothing') {
				return _elm_lang$core$Native_List.fromArray(
					[]);
			} else {
				var _p7 = _p6._0._0;
				return p(_p7) ? _elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: _p7, _1: _p6._0._1}
					]) : _elm_lang$core$Native_List.fromArray(
					[]);
			}
		});
};
var _Dandandan$parser$Parser$symbol = function (x) {
	return _Dandandan$parser$Parser$satisfy(
		function (s) {
			return _elm_lang$core$Native_Utils.eq(s, x);
		});
};
var _Dandandan$parser$Parser$empty = _Dandandan$parser$Parser$Direct(
	_elm_lang$core$Basics$always(
		_elm_lang$core$Native_List.fromArray(
			[])));
var _Dandandan$parser$Parser$map = F2(
	function (f, p) {
		return _Dandandan$parser$Parser$Direct(
			function (xs) {
				return A2(
					_elm_lang$core$List$map,
					function (_p8) {
						var _p9 = _p8;
						return {
							ctor: '_Tuple2',
							_0: f(_p9._0),
							_1: _p9._1
						};
					},
					A2(_Dandandan$parser$Parser$funP, p, xs));
			});
	});
var _Dandandan$parser$Parser_ops = _Dandandan$parser$Parser_ops || {};
_Dandandan$parser$Parser_ops['<$'] = F2(
	function (f, p) {
		return A2(
			_Dandandan$parser$Parser$map,
			_elm_lang$core$Basics$always(f),
			p);
	});
var _Dandandan$parser$Parser$or = F2(
	function (p, q) {
		return _Dandandan$parser$Parser$Direct(
			function (xs) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_Dandandan$parser$Parser$funP, p, xs),
					A2(_Dandandan$parser$Parser$funP, q, xs));
			});
	});
var _Dandandan$parser$Parser$choice = A2(_elm_lang$core$List$foldr, _Dandandan$parser$Parser$or, _Dandandan$parser$Parser$empty);
var _Dandandan$parser$Parser$optional = F2(
	function (p, x) {
		return A2(
			_Dandandan$parser$Parser$or,
			p,
			_Dandandan$parser$Parser$succeed(x));
	});
var _Dandandan$parser$Parser$andMap = F2(
	function (q, p) {
		return _Dandandan$parser$Parser$Direct(
			function (xs) {
				return _elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$map,
						function (_p10) {
							var _p11 = _p10;
							return A2(
								_elm_lang$core$List$map,
								function (_p12) {
									var _p13 = _p12;
									return {
										ctor: '_Tuple2',
										_0: _p11._0(_p13._0),
										_1: _p13._1
									};
								},
								A2(_Dandandan$parser$Parser$funP, q, _p11._1));
						},
						A2(_Dandandan$parser$Parser$funP, p, xs)));
			});
	});
var _Dandandan$parser$Parser$token = function (xs) {
	var _p14 = _elm_lang$core$String$uncons(xs);
	if (_p14.ctor === 'Nothing') {
		return _Dandandan$parser$Parser$succeed('');
	} else {
		return A2(
			_Dandandan$parser$Parser$andMap,
			_Dandandan$parser$Parser$token(_p14._0._1),
			A2(
				_Dandandan$parser$Parser$map,
				_elm_lang$core$String$cons,
				_Dandandan$parser$Parser$symbol(_p14._0._0)));
	}
};
var _Dandandan$parser$Parser$some = function (p) {
	return A2(
		_Dandandan$parser$Parser$andMap,
		_Dandandan$parser$Parser$many(p),
		A2(
			_Dandandan$parser$Parser$map,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$List_ops['::'], x, y);
				}),
			p));
};
var _Dandandan$parser$Parser$many = function (p) {
	return _Dandandan$parser$Parser$Direct(
		function (xs) {
			var _p15 = A2(_Dandandan$parser$Parser$funP, p, xs);
			if (_p15.ctor === '[]') {
				return A2(
					_Dandandan$parser$Parser$funP,
					_Dandandan$parser$Parser$succeed(
						_elm_lang$core$Native_List.fromArray(
							[])),
					xs);
			} else {
				return A2(
					_Dandandan$parser$Parser$funP,
					_Dandandan$parser$Parser$some(p),
					xs);
			}
		});
};
var _Dandandan$parser$Parser$and = F2(
	function (p, q) {
		return A2(_Dandandan$parser$Parser$andMap, q, p);
	});
var _Dandandan$parser$Parser$separatedBy = F2(
	function (p, s) {
		return A3(
			_elm_lang$core$Basics$flip,
			_Dandandan$parser$Parser$or,
			_Dandandan$parser$Parser$succeed(
				_elm_lang$core$Native_List.fromArray(
					[])),
			A2(
				_Dandandan$parser$Parser$andMap,
				_Dandandan$parser$Parser$many(
					A2(
						_Dandandan$parser$Parser$andMap,
						p,
						A2(
							_Dandandan$parser$Parser$map,
							F2(
								function (x, y) {
									return y;
								}),
							s))),
				A2(
					_Dandandan$parser$Parser$map,
					F2(
						function (x, y) {
							return A2(_elm_lang$core$List_ops['::'], x, y);
						}),
					p)));
	});
var _Dandandan$parser$Parser_ops = _Dandandan$parser$Parser_ops || {};
_Dandandan$parser$Parser_ops['<*'] = F2(
	function (p, q) {
		return A2(
			_Dandandan$parser$Parser$andMap,
			q,
			A2(_Dandandan$parser$Parser$map, _elm_lang$core$Basics$always, p));
	});
var _Dandandan$parser$Parser_ops = _Dandandan$parser$Parser_ops || {};
_Dandandan$parser$Parser_ops['*>'] = F2(
	function (p, q) {
		return A2(
			_Dandandan$parser$Parser$andMap,
			q,
			A2(
				_Dandandan$parser$Parser$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				p));
	});
var _Dandandan$parser$Parser$andThen = F2(
	function (p, f) {
		return _Dandandan$parser$Parser$Direct(
			function (xs) {
				return _elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$map,
						function (_p16) {
							var _p17 = _p16;
							return A2(
								_Dandandan$parser$Parser$funP,
								f(_p17._0),
								_p17._1);
						},
						A2(_Dandandan$parser$Parser$funP, p, xs)));
			});
	});
var _Dandandan$parser$Parser$end = _Dandandan$parser$Parser$Direct(
	function (xs) {
		var _p18 = xs;
		if (_p18 === '') {
			return A2(
				_Dandandan$parser$Parser$funP,
				_Dandandan$parser$Parser$succeed(
					{ctor: '_Tuple0'}),
				xs);
		} else {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		}
	});
