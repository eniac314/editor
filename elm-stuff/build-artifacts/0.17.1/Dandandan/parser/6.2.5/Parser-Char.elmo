var _Dandandan$parser$Parser_Char$between = F3(
	function (x, y, parser) {
		return A2(
			_Dandandan$parser$Parser_ops['<*'],
			A2(
				_Dandandan$parser$Parser_ops['*>'],
				_Dandandan$parser$Parser$symbol(x),
				parser),
			_Dandandan$parser$Parser$symbol(y));
	});
var _Dandandan$parser$Parser_Char$parenthesized = A2(
	_Dandandan$parser$Parser_Char$between,
	_elm_lang$core$Native_Utils.chr('('),
	_elm_lang$core$Native_Utils.chr(')'));
var _Dandandan$parser$Parser_Char$bracketed = A2(
	_Dandandan$parser$Parser_Char$between,
	_elm_lang$core$Native_Utils.chr('['),
	_elm_lang$core$Native_Utils.chr(']'));
var _Dandandan$parser$Parser_Char$braced = A2(
	_Dandandan$parser$Parser_Char$between,
	_elm_lang$core$Native_Utils.chr('{'),
	_elm_lang$core$Native_Utils.chr('}'));
var _Dandandan$parser$Parser_Char$quoted = A2(
	_Dandandan$parser$Parser_Char$between,
	_elm_lang$core$Native_Utils.chr('\"'),
	_elm_lang$core$Native_Utils.chr('\"'));
var _Dandandan$parser$Parser_Char$singleQuoted = A2(
	_Dandandan$parser$Parser_Char$between,
	_elm_lang$core$Native_Utils.chr('\''),
	_elm_lang$core$Native_Utils.chr('\''));
var _Dandandan$parser$Parser_Char$lower = _Dandandan$parser$Parser$satisfy(_elm_lang$core$Char$isLower);
var _Dandandan$parser$Parser_Char$upper = _Dandandan$parser$Parser$satisfy(_elm_lang$core$Char$isUpper);
