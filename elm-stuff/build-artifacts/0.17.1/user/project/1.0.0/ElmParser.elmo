var _user$project$ElmParser$trimQuot = function (s) {
	return A2(
		_elm_lang$core$String$dropRight,
		1,
		A2(_elm_lang$core$String$dropLeft, 1, s));
};
var _user$project$ElmParser$consumerLS = function (xs) {
	var _p0 = xs;
	if (_p0.ctor === '[]') {
		return _elm_lang$core$Result$Err('no more tokens');
	} else {
		return _elm_lang$core$Result$Ok(
			{ctor: '_Tuple2', _0: _p0._0, _1: _p0._1});
	}
};
var _user$project$ElmParser$token = function (s) {
	return A2(
		_user$project$BetterParser$sat,
		_user$project$ElmParser$consumerLS,
		function (t) {
			return _elm_lang$core$Native_Utils.eq(
				function (_) {
					return _.val;
				}(t),
				s);
		});
};
var _user$project$ElmParser$coma = function (p) {
	return A2(
		_user$project$BetterParser_ops['+++'],
		p,
		A2(
			_user$project$BetterParser_ops['>>*'],
			_user$project$ElmParser$token(','),
			p));
};
var _user$project$ElmParser$parseTagName = A2(
	_user$project$BetterParser_ops['>>='],
	_user$project$BetterParser$item(_user$project$ElmParser$consumerLS),
	function (v) {
		var _p1 = A2(
			_elm_lang$core$Dict$get,
			function (_) {
				return _.val;
			}(v),
			_user$project$TagAttr$tagnames);
		if (_p1.ctor === 'Nothing') {
			return _user$project$BetterParser$failure(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid tag name: ',
					_user$project$Tokenizer$tokError(v)));
		} else {
			return _user$project$BetterParser$return(_p1._0);
		}
	});
var _user$project$ElmParser$parseAttrName = A2(
	_user$project$BetterParser_ops['>>='],
	_user$project$BetterParser$item(_user$project$ElmParser$consumerLS),
	function (v) {
		var _p2 = A2(
			_elm_lang$core$Dict$get,
			function (_) {
				return _.val;
			}(v),
			_user$project$TagAttr$attrnames);
		if (_p2.ctor === 'Nothing') {
			return _user$project$BetterParser$failure(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid attribute name: ',
					_user$project$Tokenizer$tokError(v)));
		} else {
			return _user$project$BetterParser$return(_p2._0);
		}
	});
var _user$project$ElmParser$parseStringLiteral = A2(
	_user$project$BetterParser_ops['>>='],
	A2(
		_user$project$BetterParser$sat,
		_user$project$ElmParser$consumerLS,
		function (t) {
			return A2(
				_elm_lang$core$String$startsWith,
				'\"',
				function (_) {
					return _.val;
				}(t)) && A2(
				_elm_lang$core$String$endsWith,
				'\"',
				function (_) {
					return _.val;
				}(t));
		}),
	function (res) {
		return _user$project$BetterParser$return(
			_user$project$ElmParser$trimQuot(
				function (_) {
					return _.val;
				}(res)));
	});
var _user$project$ElmParser$parseStyle = function () {
	var parseTuple = A2(
		_user$project$BetterParser_ops['>>='],
		A2(
			_user$project$BetterParser_ops['>>*'],
			_user$project$ElmParser$token('('),
			_user$project$ElmParser$parseStringLiteral),
		function (v1) {
			return A2(
				_user$project$BetterParser_ops['>>='],
				A2(
					_user$project$BetterParser_ops['>>*'],
					_user$project$ElmParser$token(','),
					_user$project$ElmParser$parseStringLiteral),
				function (v2) {
					return A2(
						_user$project$BetterParser_ops['>>*'],
						_user$project$ElmParser$token(')'),
						_user$project$BetterParser$return(
							{ctor: '_Tuple2', _0: v1, _1: v2}));
				});
		});
	return A2(
		_user$project$BetterParser_ops['>>='],
		A2(
			_user$project$BetterParser_ops['>>*'],
			A2(
				_user$project$BetterParser_ops['>>*'],
				_user$project$ElmParser$token('style'),
				_user$project$ElmParser$token('[')),
			A3(
				_user$project$BetterParser$many,
				_user$project$ElmParser$coma(parseTuple),
				_elm_lang$core$Native_List.fromArray(
					[]),
				F2(
					function (x, y) {
						return A2(_elm_lang$core$List_ops['::'], x, y);
					}))),
		function (res) {
			return A2(
				_user$project$BetterParser_ops['>>*'],
				_user$project$ElmParser$token(']'),
				_user$project$BetterParser$return(
					_user$project$TagAttr$Style(res)));
		});
}();
var _user$project$ElmParser$parseAttr = A2(
	_user$project$BetterParser_ops['+++'],
	A2(
		_user$project$BetterParser_ops['>>='],
		_user$project$ElmParser$coma(_user$project$ElmParser$parseAttrName),
		function (an) {
			return A2(
				_user$project$BetterParser_ops['>>='],
				_user$project$ElmParser$parseStringLiteral,
				function (s) {
					return _user$project$BetterParser$return(
						an(s));
				});
		}),
	_user$project$ElmParser$coma(_user$project$ElmParser$parseStyle));
var _user$project$ElmParser$parseAttrList = A2(
	_user$project$BetterParser_ops['>>='],
	A2(
		_user$project$BetterParser_ops['>>*'],
		_user$project$ElmParser$token('['),
		A3(
			_user$project$BetterParser$many,
			_user$project$ElmParser$parseAttr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			F2(
				function (x, y) {
					return A2(_elm_lang$core$List_ops['::'], x, y);
				}))),
	function (res) {
		return A2(
			_user$project$BetterParser_ops['>>*'],
			_user$project$ElmParser$token(']'),
			_user$project$BetterParser$return(res));
	});
var _user$project$ElmParser$parseText = function (path) {
	return A2(
		_user$project$BetterParser_ops['>>='],
		A2(
			_user$project$BetterParser_ops['>>*'],
			A2(
				_user$project$BetterParser$sat,
				_user$project$ElmParser$consumerLS,
				function (t) {
					return _elm_lang$core$Native_Utils.eq(
						function (_) {
							return _.val;
						}(t),
						'text');
				}),
			_user$project$ElmParser$parseStringLiteral),
		function (s) {
			return _user$project$BetterParser$return(
				A2(
					_user$project$HtmlZipper$Node,
					A3(
						_user$project$HtmlZipper$Tag,
						_user$project$TagAttr$Text(s),
						A2(_elm_lang$core$List_ops['::'], _user$project$TagAttr$TextNode, path),
						_elm_lang$core$Native_List.fromArray(
							[])),
					_elm_lang$core$Native_List.fromArray(
						[])));
		});
};
var _user$project$ElmParser$parseTag = function (path) {
	return A2(
		_user$project$BetterParser_ops['+++'],
		_user$project$ElmParser$coma(
			_user$project$ElmParser$parseText(path)),
		A2(
			_user$project$BetterParser_ops['>>='],
			_user$project$ElmParser$coma(_user$project$ElmParser$parseTagName),
			function (tn) {
				return A2(
					_user$project$BetterParser_ops['>>='],
					_user$project$ElmParser$parseAttrList,
					function (al) {
						return A2(
							_user$project$BetterParser_ops['>>='],
							_user$project$ElmParser$parseTagList(
								A2(_elm_lang$core$List_ops['::'], tn, path)),
							function (ts) {
								return _user$project$BetterParser$return(
									A2(
										_user$project$HtmlZipper$Node,
										A3(
											_user$project$HtmlZipper$Tag,
											tn,
											A2(_elm_lang$core$List_ops['::'], tn, path),
											al),
										ts));
							});
					});
			}));
};
var _user$project$ElmParser$parseTagList = function (path) {
	return A2(
		_user$project$BetterParser_ops['>>='],
		A2(
			_user$project$BetterParser_ops['>>*'],
			_user$project$ElmParser$token('['),
			A3(
				_user$project$BetterParser$many,
				_user$project$ElmParser$parseTag(path),
				_elm_lang$core$Native_List.fromArray(
					[]),
				F2(
					function (x, y) {
						return A2(_elm_lang$core$List_ops['::'], x, y);
					}))),
		function (res) {
			return A2(
				_user$project$BetterParser_ops['>>*'],
				_user$project$ElmParser$token(']'),
				_user$project$BetterParser$return(res));
		});
};
var _user$project$ElmParser$interpret = function (input) {
	var _p3 = _user$project$Tokenizer$tokenizer(input);
	if (_p3.ctor === 'Err') {
		return _elm_lang$core$Result$Err(
			A2(_elm_lang$core$Basics_ops['++'], 'Tokenizer error: ', _p3._0));
	} else {
		var _p4 = A2(
			_user$project$BetterParser$parse,
			_user$project$ElmParser$parseTag(
				_elm_lang$core$Native_List.fromArray(
					[])),
			_p3._0);
		if (_p4.ctor === 'Err') {
			return _elm_lang$core$Result$Err(
				A2(_elm_lang$core$Basics_ops['++'], 'Parser error: ', _p4._0));
		} else {
			return _elm_lang$core$Result$Ok(_p4._0._0);
		}
	}
};
var _user$project$ElmParser$renderer = function (res) {
	var renderer$ = function (_p5) {
		var _p6 = _p5;
		var _p7 = _p6._0;
		return A3(
			_user$project$TagAttr$toTag,
			function (_) {
				return _.tagname;
			}(_p7),
			A2(
				_elm_lang$core$List$map,
				_user$project$TagAttr$toAttr,
				function (_) {
					return _.attr;
				}(_p7)),
			A2(_elm_lang$core$List$map, renderer$, _p6._1));
	};
	var _p8 = res;
	if (_p8.ctor === 'Err') {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Oh no!'),
					A2(
					_elm_lang$html$Html$br,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[])),
					_elm_lang$html$Html$text(_p8._0)
				]));
	} else {
		return renderer$(_p8._0);
	}
};
