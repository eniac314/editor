var _user$project$Main$is13 = function (code) {
	return _elm_lang$core$Native_Utils.eq(code, 13) ? _elm_lang$core$Result$Ok(
		{ctor: '_Tuple0'}) : _elm_lang$core$Result$Err('not the right key code');
};
var _user$project$Main$onEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Basics$always(msg),
			A2(_elm_lang$core$Json_Decode$customDecoder, _elm_lang$html$Html_Events$keyCode, _user$project$Main$is13)));
};
var _user$project$Main$centerStyle = function (direction) {
	return _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'display', _1: 'flex'},
				{ctor: '_Tuple2', _0: 'flex-direction', _1: direction},
				{ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
				{ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
				{ctor: '_Tuple2', _0: 'padding', _1: '20px 0'}
			]));
};
var _user$project$Main$words = F2(
	function (size, message) {
		return A2(
			_elm_lang$html$Html$span,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'font-size',
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(size),
								'px')
						}
						]))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(message)
				]));
	});
var _user$project$Main$viewPage = function (model) {
	var _p0 = model.page;
	switch (_p0.ctor) {
		case 'Home':
			return _elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$Main$words, 60, 'Welcome!'),
					_elm_lang$html$Html$text('Play with the links and search bar above. (Press ENTER to trigger the zip code search.)')
				]);
		case 'Blog':
			return _elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$Main$words, 20, 'This is blog post number'),
					A2(
					_user$project$Main$words,
					100,
					_elm_lang$core$Basics$toString(_p0._0))
				]);
		default:
			var _p2 = _p0._0;
			var _p1 = A2(_elm_lang$core$Dict$get, _p2, model.cache);
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('...')
					]);
			} else {
				if (_p1._0.ctor === '[]') {
					return _elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'No results found for ',
								A2(_elm_lang$core$Basics_ops['++'], _p2, '. Need a valid zip code like 90210.')))
						]);
				} else {
					return _elm_lang$core$Native_List.fromArray(
						[
							A2(
							_user$project$Main$words,
							20,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Zip code ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p2,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' is in ',
										A2(_elm_lang$core$Basics_ops['++'], _p1._0._0, '!')))))
						]);
				}
			}
	}
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$places = function () {
	var place = A3(
		_elm_lang$core$Json_Decode$object2,
		F2(
			function (city, state) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					city,
					A2(_elm_lang$core$Basics_ops['++'], ', ', state));
			}),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'place name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'state', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'places',
		_elm_lang$core$Json_Decode$list(place));
}();
var _user$project$Main$toHash = function (page) {
	var _p3 = page;
	switch (_p3.ctor) {
		case 'Home':
			return '#home';
		case 'Blog':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'#blog/',
				_elm_lang$core$Basics$toString(_p3._0));
		default:
			return A2(_elm_lang$core$Basics_ops['++'], '#search/', _p3._0);
	}
};
var _user$project$Main$viewLink = F2(
	function (page, description) {
		return A2(
			_elm_lang$html$Html$a,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'padding', _1: '0 20px'}
						])),
					_elm_lang$html$Html_Attributes$href(
					_user$project$Main$toHash(page))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(description)
				]));
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {page: a, query: b, cache: c};
	});
var _user$project$Main$Search = function (a) {
	return {ctor: 'Search', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'Query':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{query: _p4._0}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Enter':
				var newPage = _user$project$Main$Search(model.query);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{page: newPage}),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$navigation$Navigation$newUrl(
							_user$project$Main$toHash(newPage))
						]));
			case 'FetchFailure':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							cache: A3(
								_elm_lang$core$Dict$insert,
								_p4._0,
								_elm_lang$core$Native_List.fromArray(
									[]),
								model.cache)
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							cache: A3(_elm_lang$core$Dict$insert, _p4._0, _p4._1, model.cache)
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
		}
	});
var _user$project$Main$Blog = function (a) {
	return {ctor: 'Blog', _0: a};
};
var _user$project$Main$Home = {ctor: 'Home'};
var _user$project$Main$pageParser = _evancz$url_parser$UrlParser$oneOf(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_evancz$url_parser$UrlParser$format,
			_user$project$Main$Home,
			_evancz$url_parser$UrlParser$s('home')),
			A2(
			_evancz$url_parser$UrlParser$format,
			_user$project$Main$Blog,
			A2(
				_evancz$url_parser$UrlParser_ops['</>'],
				_evancz$url_parser$UrlParser$s('blog'),
				_evancz$url_parser$UrlParser$int)),
			A2(
			_evancz$url_parser$UrlParser$format,
			_user$project$Main$Search,
			A2(
				_evancz$url_parser$UrlParser_ops['</>'],
				_evancz$url_parser$UrlParser$s('search'),
				_evancz$url_parser$UrlParser$string))
		]));
var _user$project$Main$hashParser = function (location) {
	return A3(
		_evancz$url_parser$UrlParser$parse,
		_elm_lang$core$Basics$identity,
		_user$project$Main$pageParser,
		A2(_elm_lang$core$String$dropLeft, 1, location.hash));
};
var _user$project$Main$FetchSuccess = F2(
	function (a, b) {
		return {ctor: 'FetchSuccess', _0: a, _1: b};
	});
var _user$project$Main$FetchFailure = F2(
	function (a, b) {
		return {ctor: 'FetchFailure', _0: a, _1: b};
	});
var _user$project$Main$get = function (query) {
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$Main$FetchFailure(query),
		_user$project$Main$FetchSuccess(query),
		A2(
			_evancz$elm_http$Http$get,
			_user$project$Main$places,
			A2(_elm_lang$core$Basics_ops['++'], 'http://api.zippopotam.us/us/', query)));
};
var _user$project$Main$urlUpdate = F2(
	function (result, model) {
		var _p5 = A2(_elm_lang$core$Debug$log, 'result', result);
		if (_p5.ctor === 'Err') {
			return {
				ctor: '_Tuple2',
				_0: model,
				_1: _elm_lang$navigation$Navigation$modifyUrl(
					_user$project$Main$toHash(model.page))
			};
		} else {
			if (_p5._0.ctor === 'Search') {
				var _p6 = _p5._0._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{page: _p5._0, query: _p6}),
					A2(_elm_lang$core$Dict$member, _p6, model.cache) ? _elm_lang$core$Native_List.fromArray(
						[]) : _elm_lang$core$Native_List.fromArray(
						[
							_user$project$Main$get(_p6)
						]));
			} else {
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{page: _p5._0, query: ''}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			}
		}
	});
var _user$project$Main$init = function (result) {
	return A2(
		_user$project$Main$urlUpdate,
		result,
		A3(_user$project$Main$Model, _user$project$Main$Home, '', _elm_lang$core$Dict$empty));
};
var _user$project$Main$Enter = {ctor: 'Enter'};
var _user$project$Main$Query = function (a) {
	return {ctor: 'Query', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Main$centerStyle('row')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$Main$viewLink, _user$project$Main$Home, 'Home'),
						A2(
						_user$project$Main$viewLink,
						_user$project$Main$Blog(42),
						'Cat Facts'),
						A2(
						_user$project$Main$viewLink,
						_user$project$Main$Blog(13),
						'Alligator Jokes'),
						A2(
						_user$project$Main$viewLink,
						_user$project$Main$Blog(26),
						'Workout Plan'),
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$placeholder('Enter a zip code (e.g. 90210)'),
								_elm_lang$html$Html_Attributes$value(model.query),
								_user$project$Main$onEnter(_user$project$Main$Enter),
								_elm_lang$html$Html_Events$onInput(_user$project$Main$Query),
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'width', _1: '200px'},
										{ctor: '_Tuple2', _0: 'margin', _1: '0 20px'}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$hr,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Main$centerStyle('column')
					]),
				_user$project$Main$viewPage(model))
			]));
};
var _user$project$Main$main = {
	main: A2(
		_elm_lang$navigation$Navigation$program,
		_elm_lang$navigation$Navigation$makeParser(_user$project$Main$hashParser),
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, urlUpdate: _user$project$Main$urlUpdate, subscriptions: _user$project$Main$subscriptions})
};
