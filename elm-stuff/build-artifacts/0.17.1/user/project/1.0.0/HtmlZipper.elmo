var _user$project$HtmlZipper$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					var _p0 = ys;
					if (_p0.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: left,
							_1: _elm_lang$core$Native_List.fromArray(
								[])
						};
					} else {
						var _p2 = _p0._1;
						var _p1 = _p0._0;
						if (p(_p1)) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$List$reverse(left),
								_1: A2(_elm_lang$core$List_ops['::'], _p1, _p2)
							};
						} else {
							var _v1 = _p2,
								_v2 = A2(_elm_lang$core$List_ops['::'], _p1, left);
							ys = _v1;
							left = _v2;
							continue helper;
						}
					}
				}
			});
		return A2(
			helper,
			xs,
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _user$project$HtmlZipper$trimQuot = function (s) {
	return A2(
		_elm_lang$core$String$dropRight,
		1,
		A2(_elm_lang$core$String$dropLeft, 1, s));
};
var _user$project$HtmlZipper$htmlToString = function (html) {
	var getA = function (attrname) {
		return _elm_lang$core$String$toLower(
			_elm_lang$core$Basics$toString(attrname));
	};
	var attrListToString = function (ats) {
		return A2(
			_elm_lang$core$List$map,
			function (a) {
				var _p3 = _user$project$TagAttr$splitAttr(a);
				var an = _p3._0;
				var payload = _p3._1;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$HtmlZipper$trimQuot(
						getA(an)),
					A2(_elm_lang$core$Basics_ops['++'], ' ', payload));
			},
			ats);
	};
	var getT = function (tagname) {
		return _elm_lang$core$String$toLower(
			_elm_lang$core$Basics$toString(tagname));
	};
	var spacer = function (indent) {
		return _elm_lang$core$Native_Utils.eq(indent, 0) ? '' : A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			spacer(indent - 1));
	};
	var helper = F2(
		function (indent, _p4) {
			var _p5 = _p4;
			var atList = attrListToString(_p5._0.attr);
			var tn = getT(_p5._0.tagname);
			var off = _elm_lang$core$String$length(tn);
			var buff = spacer(indent + off);
			var tglist = A2(
				_elm_lang$core$List$map,
				helper((indent + off) + 3),
				_p5._1);
			if (A2(_elm_lang$core$String$startsWith, 'text', tn)) {
				return tn;
			} else {
				var tgln = _elm_lang$core$Native_Utils.eq(
					tglist,
					_elm_lang$core$Native_List.fromArray(
						[])) ? ' []' : A2(
					_elm_lang$core$Basics_ops['++'],
					' [ ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$String$join,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								A2(_elm_lang$core$Basics_ops['++'], buff, ' , ')),
							tglist),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(_elm_lang$core$Basics_ops['++'], buff, ' ]'))));
				var atln = _elm_lang$core$Native_Utils.eq(
					atList,
					_elm_lang$core$Native_List.fromArray(
						[])) ? ' []' : A2(
					_elm_lang$core$Basics_ops['++'],
					' [ ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$String$join,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								A2(_elm_lang$core$Basics_ops['++'], buff, ' , ')),
							atList),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(_elm_lang$core$Basics_ops['++'], buff, ' ]'))));
				return A2(
					_elm_lang$core$Basics_ops['++'],
					tn,
					A2(
						_elm_lang$core$Basics_ops['++'],
						atln,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(_elm_lang$core$Basics_ops['++'], buff, tgln))));
			}
		});
	return A2(helper, 0, html);
};
var _user$project$HtmlZipper$extractTag = function (_p6) {
	var _p7 = _p6;
	return _p7._0._0._0;
};
var _user$project$HtmlZipper$extractPath = function (z) {
	return function (_) {
		return _.path;
	}(
		_user$project$HtmlZipper$extractTag(z));
};
var _user$project$HtmlZipper$Tag = F3(
	function (a, b, c) {
		return {tagname: a, path: b, attr: c};
	});
var _user$project$HtmlZipper$Node = F2(
	function (a, b) {
		return {ctor: 'Node', _0: a, _1: b};
	});
var _user$project$HtmlZipper$extractTree = function (_p8) {
	var _p9 = _p8;
	return A2(_user$project$HtmlZipper$Node, _p9._0._0._0, _p9._0._0._1);
};
var _user$project$HtmlZipper$Context = F3(
	function (a, b, c) {
		return {ctor: 'Context', _0: a, _1: b, _2: c};
	});
var _user$project$HtmlZipper$ZipTree = function (a) {
	return {ctor: 'ZipTree', _0: a};
};
var _user$project$HtmlZipper$initZip = function (t) {
	return _user$project$HtmlZipper$ZipTree(
		{
			ctor: '_Tuple2',
			_0: t,
			_1: _elm_lang$core$Native_List.fromArray(
				[])
		});
};
var _user$project$HtmlZipper$updateFocus = F2(
	function (t, _p10) {
		var _p11 = _p10;
		return _user$project$HtmlZipper$ZipTree(
			{ctor: '_Tuple2', _0: t, _1: _p11._0._1});
	});
var _user$project$HtmlZipper$zipUp = function (_p12) {
	var _p13 = _p12;
	var _p14 = _p13._0._1;
	if (_p14.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_user$project$HtmlZipper$ZipTree(
				{
					ctor: '_Tuple2',
					_0: A2(
						_user$project$HtmlZipper$Node,
						_p14._0._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p14._0._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Native_List.fromArray(
									[_p13._0._0]),
								_p14._0._2))),
					_1: _p14._1
				}));
	}
};
var _user$project$HtmlZipper$zipDown = F2(
	function (p, _p15) {
		var _p16 = _p15;
		var _p17 = _p16._0._0._1;
		if (_p17.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p18 = A2(_user$project$HtmlZipper$break, p, _p17);
			var l = _p18._0;
			var r = _p18._1;
			var _p19 = r;
			if (_p19.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					_user$project$HtmlZipper$ZipTree(
						{
							ctor: '_Tuple2',
							_0: _p19._0,
							_1: A2(
								_elm_lang$core$List_ops['::'],
								A3(_user$project$HtmlZipper$Context, _p16._0._0._0, l, _p19._1),
								_p16._0._1)
						}));
			}
		}
	});
var _user$project$HtmlZipper$cd = F3(
	function (path, f, zt) {
		cd:
		while (true) {
			var _p20 = path;
			if (_p20.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p20._1.ctor === '[]') {
					var g = function (_p21) {
						var _p22 = _p21;
						return _elm_lang$core$Native_Utils.eq(
							f(_p22._0),
							_p20._0);
					};
					return A2(_user$project$HtmlZipper$zipDown, g, zt);
				} else {
					var g = function (_p23) {
						var _p24 = _p23;
						return _elm_lang$core$Native_Utils.eq(
							f(_p24._0),
							_p20._0);
					};
					var _p25 = A2(_user$project$HtmlZipper$zipDown, g, zt);
					if (_p25.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _v16 = _p20._1,
							_v17 = f,
							_v18 = _p25._0;
						path = _v16;
						f = _v17;
						zt = _v18;
						continue cd;
					}
				}
			}
		}
	});
var _user$project$HtmlZipper$zipDownFirst = function (_p26) {
	var _p27 = _p26;
	var _p28 = _p27._0._0._1;
	if (_p28.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_user$project$HtmlZipper$ZipTree(
				{
					ctor: '_Tuple2',
					_0: _p28._0,
					_1: A2(
						_elm_lang$core$List_ops['::'],
						A3(
							_user$project$HtmlZipper$Context,
							_p27._0._0._0,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_p28._1),
						_p27._0._1)
				}));
	}
};
var _user$project$HtmlZipper$zipRight = function (_p29) {
	var _p30 = _p29;
	var _p31 = _p30._0._1;
	if (_p31.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p32 = _p31._0._2;
		if (_p32.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$ZipTree(
					{
						ctor: '_Tuple2',
						_0: _p32._0,
						_1: A2(
							_elm_lang$core$List_ops['::'],
							A3(
								_user$project$HtmlZipper$Context,
								_p31._0._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p31._0._1,
									_elm_lang$core$Native_List.fromArray(
										[_p30._0._0])),
								_p32._1),
							_p31._1)
					}));
		}
	}
};
var _user$project$HtmlZipper$zipLeft = function (_p33) {
	var _p34 = _p33;
	var _p35 = _p34._0._1;
	if (_p35.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p36 = _elm_lang$core$List$reverse(_p35._0._1);
		if (_p36.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$ZipTree(
					{
						ctor: '_Tuple2',
						_0: _p36._0,
						_1: A2(
							_elm_lang$core$List_ops['::'],
							A3(
								_user$project$HtmlZipper$Context,
								_p35._0._0,
								_elm_lang$core$List$reverse(_p36._1),
								A2(_elm_lang$core$List_ops['::'], _p34._0._0, _p35._0._2)),
							_p35._1)
					}));
		}
	}
};
