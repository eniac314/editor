var _user$project$HtmlZipper$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					var _p0 = ys;
					if (_p0.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: left,
							_1: _elm_lang$core$Native_List.fromArray(
								[])
						};
					} else {
						var _p2 = _p0._1;
						var _p1 = _p0._0;
						if (p(_p1)) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$List$reverse(left),
								_1: A2(_elm_lang$core$List_ops['::'], _p1, _p2)
							};
						} else {
							var _v1 = _p2,
								_v2 = A2(_elm_lang$core$List_ops['::'], _p1, left);
							ys = _v1;
							left = _v2;
							continue helper;
						}
					}
				}
			});
		return A2(
			helper,
			xs,
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _user$project$HtmlZipper$trimQuot = function (s) {
	return A2(
		_elm_lang$core$String$dropRight,
		1,
		A2(_elm_lang$core$String$dropLeft, 1, s));
};
var _user$project$HtmlZipper$htmlToString = function (html) {
	var getA = function (attrname) {
		return _elm_lang$core$String$toLower(
			_elm_lang$core$Basics$toString(attrname));
	};
	var attrListToString = function (ats) {
		return A2(
			_elm_lang$core$List$map,
			function (a) {
				var _p3 = _user$project$TagAttr$splitAttr(a);
				var an = _p3._0;
				var payload = _p3._1;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$HtmlZipper$trimQuot(
						getA(an)),
					A2(_elm_lang$core$Basics_ops['++'], ' ', payload));
			},
			ats);
	};
	var getT = function (tagname) {
		return _elm_lang$core$String$toLower(
			_elm_lang$core$Basics$toString(tagname));
	};
	var spacer = function (indent) {
		return _elm_lang$core$Native_Utils.eq(indent, 0) ? '' : A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			spacer(indent - 1));
	};
	var helper = F2(
		function (indent, _p4) {
			var _p5 = _p4;
			var _p7 = _p5._0.tagname;
			var atList = attrListToString(_p5._0.attr);
			var tn = getT(_p7);
			var off = _elm_lang$core$String$length(tn);
			var buff = spacer(indent + off);
			var atln = _elm_lang$core$Native_Utils.eq(
				atList,
				_elm_lang$core$Native_List.fromArray(
					[])) ? ' []' : A2(
				_elm_lang$core$Basics_ops['++'],
				' [ ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$join,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(_elm_lang$core$Basics_ops['++'], buff, ' , ')),
						atList),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\n',
						A2(_elm_lang$core$Basics_ops['++'], buff, ' ]'))));
			var tglist = A2(
				_elm_lang$core$List$map,
				helper((indent + off) + 3),
				_p5._1);
			var tgln = _elm_lang$core$Native_Utils.eq(
				tglist,
				_elm_lang$core$Native_List.fromArray(
					[])) ? ' []' : A2(
				_elm_lang$core$Basics_ops['++'],
				' [ ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$join,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(_elm_lang$core$Basics_ops['++'], buff, ' , ')),
						tglist),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\n',
						A2(_elm_lang$core$Basics_ops['++'], buff, ' ]'))));
			var _p6 = _p7;
			switch (_p6.ctor) {
				case 'Text':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'text \"',
						A2(_elm_lang$core$Basics_ops['++'], _p6._0, '\"'));
				case 'Markdown':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'markdown \n\"',
						A2(_elm_lang$core$Basics_ops['++'], _p6._0, '\"'));
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						tn,
						A2(
							_elm_lang$core$Basics_ops['++'],
							atln,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								A2(_elm_lang$core$Basics_ops['++'], buff, tgln))));
			}
		});
	return A2(helper, 0, html);
};
var _user$project$HtmlZipper$root = function (path) {
	return _elm_lang$core$List$head(path);
};
var _user$project$HtmlZipper$extractTag = function (_p8) {
	var _p9 = _p8;
	return _p9._0._0._0;
};
var _user$project$HtmlZipper$extractPath = function (z) {
	return function (_) {
		return _.path;
	}(
		_user$project$HtmlZipper$extractTag(z));
};
var _user$project$HtmlZipper$Tag = F3(
	function (a, b, c) {
		return {tagname: a, path: b, attr: c};
	});
var _user$project$HtmlZipper$Node = F2(
	function (a, b) {
		return {ctor: 'Node', _0: a, _1: b};
	});
var _user$project$HtmlZipper$extractTree = function (_p10) {
	var _p11 = _p10;
	return A2(_user$project$HtmlZipper$Node, _p11._0._0._0, _p11._0._0._1);
};
var _user$project$HtmlZipper$Context = F3(
	function (a, b, c) {
		return {ctor: 'Context', _0: a, _1: b, _2: c};
	});
var _user$project$HtmlZipper$ZipTree = function (a) {
	return {ctor: 'ZipTree', _0: a};
};
var _user$project$HtmlZipper$initZip = function (t) {
	return _user$project$HtmlZipper$ZipTree(
		{
			ctor: '_Tuple2',
			_0: t,
			_1: _elm_lang$core$Native_List.fromArray(
				[])
		});
};
var _user$project$HtmlZipper$updateTag = F2(
	function (_p13, _p12) {
		var _p14 = _p13;
		var _p17 = _p14._0;
		var _p15 = _p12;
		var path = function () {
			var _p16 = function (_) {
				return _.path;
			}(_p15._0._0._0);
			if (_p16.ctor === '[]') {
				return function (_) {
					return _.path;
				}(_p17);
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					function (_) {
						return _.path;
					}(_p17),
					_p16._1);
			}
		}();
		return _user$project$HtmlZipper$ZipTree(
			{
				ctor: '_Tuple2',
				_0: A2(
					_user$project$HtmlZipper$Node,
					A3(
						_user$project$HtmlZipper$Tag,
						function (_) {
							return _.tagname;
						}(_p17),
						path,
						function (_) {
							return _.attr;
						}(_p17)),
					_p14._1),
				_1: _p15._0._1
			});
	});
var _user$project$HtmlZipper$updateFocus = F2(
	function (t, _p18) {
		var _p19 = _p18;
		return _user$project$HtmlZipper$ZipTree(
			{ctor: '_Tuple2', _0: t, _1: _p19._0._1});
	});
var _user$project$HtmlZipper$zipUp = function (_p20) {
	var _p21 = _p20;
	var _p22 = _p21._0._1;
	if (_p22.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_user$project$HtmlZipper$ZipTree(
				{
					ctor: '_Tuple2',
					_0: A2(
						_user$project$HtmlZipper$Node,
						_p22._0._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p22._0._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Native_List.fromArray(
									[_p21._0._0]),
								_p22._0._2))),
					_1: _p22._1
				}));
	}
};
var _user$project$HtmlZipper$zipDown = F2(
	function (p, _p23) {
		var _p24 = _p23;
		var _p25 = _p24._0._0._1;
		if (_p25.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p26 = A2(_user$project$HtmlZipper$break, p, _p25);
			var l = _p26._0;
			var r = _p26._1;
			var _p27 = r;
			if (_p27.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					_user$project$HtmlZipper$ZipTree(
						{
							ctor: '_Tuple2',
							_0: _p27._0,
							_1: A2(
								_elm_lang$core$List_ops['::'],
								A3(_user$project$HtmlZipper$Context, _p24._0._0._0, l, _p27._1),
								_p24._0._1)
						}));
			}
		}
	});
var _user$project$HtmlZipper$cd = F3(
	function (path, f, zt) {
		cd:
		while (true) {
			var _p28 = path;
			if (_p28.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p28._1.ctor === '[]') {
					var g = function (_p29) {
						var _p30 = _p29;
						var _p31 = f(_p30._0);
						if (_p31.ctor === 'Nothing') {
							return false;
						} else {
							return _elm_lang$core$Native_Utils.eq(_p31._0, _p28._0);
						}
					};
					return A2(_user$project$HtmlZipper$zipDown, g, zt);
				} else {
					var g = function (_p32) {
						var _p33 = _p32;
						var _p34 = f(_p33._0);
						if (_p34.ctor === 'Nothing') {
							return false;
						} else {
							return _elm_lang$core$Native_Utils.eq(_p34._0, _p28._0);
						}
					};
					var _p35 = A2(_user$project$HtmlZipper$zipDown, g, zt);
					if (_p35.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _v22 = _p28._1,
							_v23 = f,
							_v24 = _p35._0;
						path = _v22;
						f = _v23;
						zt = _v24;
						continue cd;
					}
				}
			}
		}
	});
var _user$project$HtmlZipper$cd$ = F2(
	function (path, zt) {
		var hasSameName = F2(
			function (d, _p36) {
				var _p37 = _p36;
				var tn = function (_) {
					return _.path;
				}(_p37._0);
				var _p38 = _user$project$HtmlZipper$root(tn);
				if (_p38.ctor === 'Nothing') {
					return false;
				} else {
					return _elm_lang$core$Native_Utils.eq(_p38._0, d);
				}
			});
		var helper = F2(
			function (dest, zt) {
				helper:
				while (true) {
					var _p39 = dest;
					if (_p39.ctor === '[]') {
						return _elm_lang$core$Maybe$Just(zt);
					} else {
						var _p40 = A2(
							_user$project$HtmlZipper$zipDown,
							hasSameName(_p39._0),
							zt);
						if (_p40.ctor === 'Nothing') {
							return _elm_lang$core$Maybe$Nothing;
						} else {
							var _v29 = _p39._1,
								_v30 = _p40._0;
							dest = _v29;
							zt = _v30;
							continue helper;
						}
					}
				}
			});
		var trimPath = F2(
			function (cs, ds) {
				trimPath:
				while (true) {
					var _p41 = {ctor: '_Tuple2', _0: cs, _1: ds};
					if (_p41._0.ctor === '[]') {
						if (_p41._1.ctor === '[]') {
							return _elm_lang$core$Native_List.fromArray(
								[]);
						} else {
							return _p41._1;
						}
					} else {
						if (_p41._1.ctor === '[]') {
							return _elm_lang$core$Native_List.fromArray(
								[]);
						} else {
							if (_elm_lang$core$Native_Utils.eq(_p41._0._0, _p41._1._0)) {
								var _v32 = _p41._0._1,
									_v33 = _p41._1._1;
								cs = _v32;
								ds = _v33;
								continue trimPath;
							} else {
								return _elm_lang$core$Native_List.fromArray(
									[]);
							}
						}
					}
				}
			});
		var dest = _elm_lang$core$List$reverse(path);
		var current = _elm_lang$core$List$reverse(
			_user$project$HtmlZipper$extractPath(zt));
		var directions = A2(trimPath, current, dest);
		return A2(helper, directions, zt);
	});
var _user$project$HtmlZipper$zipDownFirst = function (_p42) {
	var _p43 = _p42;
	var _p44 = _p43._0._0._1;
	if (_p44.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_user$project$HtmlZipper$ZipTree(
				{
					ctor: '_Tuple2',
					_0: _p44._0,
					_1: A2(
						_elm_lang$core$List_ops['::'],
						A3(
							_user$project$HtmlZipper$Context,
							_p43._0._0._0,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_p44._1),
						_p43._0._1)
				}));
	}
};
var _user$project$HtmlZipper$zipRight = function (_p45) {
	var _p46 = _p45;
	var _p47 = _p46._0._1;
	if (_p47.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p48 = _p47._0._2;
		if (_p48.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$ZipTree(
					{
						ctor: '_Tuple2',
						_0: _p48._0,
						_1: A2(
							_elm_lang$core$List_ops['::'],
							A3(
								_user$project$HtmlZipper$Context,
								_p47._0._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p47._0._1,
									_elm_lang$core$Native_List.fromArray(
										[_p46._0._0])),
								_p48._1),
							_p47._1)
					}));
		}
	}
};
var _user$project$HtmlZipper$zipLeft = function (_p49) {
	var _p50 = _p49;
	var _p51 = _p50._0._1;
	if (_p51.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p52 = _elm_lang$core$List$reverse(_p51._0._1);
		if (_p52.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$ZipTree(
					{
						ctor: '_Tuple2',
						_0: _p52._0,
						_1: A2(
							_elm_lang$core$List_ops['::'],
							A3(
								_user$project$HtmlZipper$Context,
								_p51._0._0,
								_elm_lang$core$List$reverse(_p52._1),
								A2(_elm_lang$core$List_ops['::'], _p50._0._0, _p51._0._2)),
							_p51._1)
					}));
		}
	}
};
