var _user$project$Editor$testinput4 = ' div []\n      [ h2 [] [text \"first title\"]\n      ] \n  \n  ';
var _user$project$Editor$testinput3 = ' [ class \"mainDiv\" , id \"toto\" ]\n   ';
var _user$project$Editor$testinput2 = ' textarea [] [text \"hello\"]\n\n  ';
var _user$project$Editor$testinput = ' div [ class \"main\"]\n          [ header [] [h1 [] [text \"A great page\"]]\n          , body []\n                 [form []\n                       [ textarea [] [text \"placeholder\"] \n                       , button [] [text \"press here!\"]\n                       ]\n                  , a [href \"http://www.google.com\"]\n                      [text \"the answer to everything\"]\n                 , table []\n                         [ th  [] [text \"table header\"]\n                         , tr  [] [td [] [text \"case 1\"]\n                                  ,td [] [text \"case 2\"]\n                                  ,td [] [text \"case 3\"]\n                                  ,td [] [text \"case 4\"]\n                                  ]\n                          , tr  [] [td [] [text \"case 5\"]\n                                  ,td [] [text \"case 6\"]\n                                  ,td [] [text \"case 7\"]\n                                  ,td [] [text \"case 8\"]\n                                  ]\n                         ]\n                 ]\n          , footer [] [text \"this is the end\"]\n          ]\n\n  ';
var _user$project$Editor$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Editor$move = F2(
	function (f, model) {
		var newPage = function () {
			var _p0 = function (_) {
				return _.page;
			}(model);
			if (_p0.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p2 = _p0._0;
				var _p1 = f(_p2);
				if (_p1.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Just(_p2);
				} else {
					return _elm_lang$core$Maybe$Just(_p1._0);
				}
			}
		}();
		var newRstring = function () {
			var _p3 = newPage;
			if (_p3.ctor === 'Nothing') {
				return function (_) {
					return _.rawString;
				}(model);
			} else {
				return _user$project$HtmlZipper$htmlToString(
					_user$project$HtmlZipper$extractTree(_p3._0));
			}
		}();
		var newProcString = _elm_lang$core$Maybe$Just(newRstring);
		var newParsedData = function () {
			var _p4 = newPage;
			if (_p4.ctor === 'Nothing') {
				return _elm_lang$core$Result$Err('wrong Html tree');
			} else {
				return _elm_lang$core$Result$Ok(
					{
						ctor: '_Tuple2',
						_0: _user$project$HtmlZipper$extractTree(_p4._0),
						_1: function (_) {
							return _.nextId;
						}(model)
					});
			}
		}();
		var newRender = _user$project$ElmParser$renderer(newParsedData);
		var newPath = function () {
			var _p5 = newPage;
			if (_p5.ctor === 'Nothing') {
				return function (_) {
					return _.currPath;
				}(model);
			} else {
				return _user$project$HtmlZipper$extractPath(_p5._0);
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			model,
			{rawString: newRstring, procString: newProcString, parsedData: newParsedData, currPath: newPath, page: newPage, toRender: newRender});
	});
var _user$project$Editor$parse = function (model) {
	var pdata = A2(
		_user$project$ElmParser$interpret,
		function (_) {
			return _.rawString;
		}(model),
		function (_) {
			return _.nextId;
		}(model));
	var prString = function () {
		var _p6 = pdata;
		if (_p6.ctor === 'Err') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$htmlToString(_p6._0._0));
		}
	}();
	var newPage = function () {
		var _p7 = pdata;
		if (_p7.ctor === 'Err') {
			return function (_) {
				return _.page;
			}(model);
		} else {
			var _p9 = _p7._0._0;
			var _p8 = function (_) {
				return _.page;
			}(model);
			if (_p8.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					_user$project$HtmlZipper$initZip(_p9));
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$HtmlZipper$updateTag, _p9, _p8._0));
			}
		}
	}();
	var currPath = function () {
		var _p10 = newPage;
		if (_p10.ctor === 'Nothing') {
			return function (_) {
				return _.currPath;
			}(model);
		} else {
			return _user$project$HtmlZipper$extractPath(_p10._0);
		}
	}();
	var nextId = function () {
		var _p11 = pdata;
		if (_p11.ctor === 'Err') {
			return function (_) {
				return _.nextId;
			}(model);
		} else {
			return A2(
				_javcasas$elm_integer$Data_Integer$add,
				_p11._0._1,
				_javcasas$elm_integer$Data_Integer$fromInt(1));
		}
	}();
	return _elm_lang$core$Native_Utils.update(
		model,
		{procString: prString, parsedData: pdata, page: newPage, nextId: nextId, currPath: currPath});
};
var _user$project$Editor$update = F2(
	function (msg, model) {
		var _p12 = msg;
		switch (_p12.ctor) {
			case 'Store':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{rawString: _p12._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Parse':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Editor$parse(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Up':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipUp, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Down':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipDownFirst, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Left':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipLeft, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Right':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipRight, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: A2(
						_user$project$Editor$move,
						_user$project$HtmlZipper$cd$(_p12._0),
						model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Debug':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							debug: _elm_lang$core$Basics$not(
								function (_) {
									return _.debug;
								}(model))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							toRender: _user$project$ElmParser$renderer(
								function (_) {
									return _.parsedData;
								}(model))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Editor$_p13 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace('editor');
var _user$project$Editor$id = _user$project$Editor$_p13.id;
var _user$project$Editor$class = _user$project$Editor$_p13.$class;
var _user$project$Editor$classList = _user$project$Editor$_p13.classList;
var _user$project$Editor$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {rawString: a, procString: b, parsedData: c, currPath: d, page: e, toRender: f, nextId: g, debug: h};
	});
var _user$project$Editor$init = function (initInput) {
	var pdata = A2(
		_user$project$ElmParser$interpret,
		initInput,
		_javcasas$elm_integer$Data_Integer$fromInt(0));
	var initPage = function () {
		var _p14 = pdata;
		if (_p14.ctor === 'Err') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$initZip(_p14._0._0));
		}
	}();
	var initPath = function () {
		var _p15 = initPage;
		if (_p15.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			return _user$project$HtmlZipper$extractPath(_p15._0);
		}
	}();
	var nextId = function () {
		var _p16 = pdata;
		if (_p16.ctor === 'Err') {
			return _javcasas$elm_integer$Data_Integer$fromInt(0);
		} else {
			return A2(
				_javcasas$elm_integer$Data_Integer$add,
				_p16._0._1,
				_javcasas$elm_integer$Data_Integer$fromInt(1));
		}
	}();
	return A8(
		_user$project$Editor$Model,
		initInput,
		_elm_lang$core$Maybe$Nothing,
		pdata,
		initPath,
		initPage,
		_user$project$ElmParser$renderer(pdata),
		nextId,
		true);
};
var _user$project$Editor$Debug = {ctor: 'Debug'};
var _user$project$Editor$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _user$project$Editor$Right = {ctor: 'Right'};
var _user$project$Editor$Left = {ctor: 'Left'};
var _user$project$Editor$Down = {ctor: 'Down'};
var _user$project$Editor$Up = {ctor: 'Up'};
var _user$project$Editor$explorer = F2(
	function (page, dbug) {
		var render = function (_p17) {
			var _p18 = _p17;
			var colors = _elm_lang$core$List$reverse(
				_elm_lang$core$Native_List.fromArray(
					['ivory', 'khaki', 'lavender', 'lavenderblush', 'lightcoral', 'lightgreen', 'lemonchiffon', 'thistle', 'mediumspringgreen', 'lightskyblue']));
			var colorPicker = function (xs) {
				colorPicker:
				while (true) {
					var _p19 = xs;
					if (_p19.ctor === '[]') {
						var _v16 = colors;
						xs = _v16;
						continue colorPicker;
					} else {
						return {ctor: '_Tuple2', _0: _p19._0, _1: _p19._1};
					}
				}
			};
			var spacer = function (indent) {
				return _elm_lang$core$Native_Utils.eq(indent, 0) ? '' : A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					spacer(indent - 1));
			};
			var render$ = F3(
				function (n, cs, _p20) {
					var _p21 = _p20;
					var _p24 = _p21._0;
					var _p22 = colorPicker(cs);
					var c = _p22._0;
					var cs$ = _p22._1;
					var pth = function (_) {
						return _.path;
					}(_p24);
					var tn = function () {
						var _p23 = function (_) {
							return _.tagname;
						}(_p24);
						if (_p23.ctor === 'Text') {
							return 'Text';
						} else {
							return _elm_lang$core$Basics$toString(_p23);
						}
					}();
					return A2(
						_elm_lang$html$Html$p,
						_elm_lang$core$Native_List.fromArray(
							[
								_user$project$Editor$class(
								_elm_lang$core$Native_List.fromArray(
									[_user$project$EditorCss$ExplTag])),
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'background-color', _1: c}
									])),
								_elm_lang$html$Html_Events$onClick(
								_user$project$Editor$GoTo(pth))
							]),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										spacer(n),
										tn))
								]),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html$span,
										_elm_lang$core$Native_List.fromArray(
											[
												_user$project$Editor$classList(
												_elm_lang$core$Native_List.fromArray(
													[
														{ctor: '_Tuple2', _0: 'Debug', _1: dbug}
													]))
											]),
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(pth))
											]))
									]),
								A2(
									_elm_lang$core$List$map,
									A2(render$, n + 3, cs$),
									_p21._1))));
				});
			return A3(render$, 0, colors, _p18._0._0);
		};
		var tags = function () {
			var _p25 = page;
			if (_p25.ctor === 'Nothing') {
				return A2(
					_elm_lang$html$Html$span,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[]));
			} else {
				return render(_p25._0);
			}
		}();
		var explWindow = function (tags) {
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$id(_user$project$EditorCss$ExplWindow)
					]),
				_elm_lang$core$Native_List.fromArray(
					[tags]));
		};
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$Editor$id('explorer'),
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'width', _1: '95%'}
						]))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					explWindow(tags),
					A2(
					_elm_lang$html$Html$button,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Events$onClick(_user$project$Editor$Up),
							_elm_lang$html$Html_Attributes$type$('reset')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Left')
						])),
					A2(
					_elm_lang$html$Html$button,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Events$onClick(_user$project$Editor$Down),
							_elm_lang$html$Html_Attributes$type$('reset')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Right')
						])),
					A2(
					_elm_lang$html$Html$button,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Events$onClick(_user$project$Editor$Left),
							_elm_lang$html$Html_Attributes$type$('reset')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Up')
						])),
					A2(
					_elm_lang$html$Html$button,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Events$onClick(_user$project$Editor$Right),
							_elm_lang$html$Html_Attributes$type$('reset')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Down')
						]))
				]));
	});
var _user$project$Editor$Render = {ctor: 'Render'};
var _user$project$Editor$Parse = {ctor: 'Parse'};
var _user$project$Editor$Store = function (a) {
	return {ctor: 'Store', _0: a};
};
var _user$project$Editor$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Editor$id(_user$project$EditorCss$Editor)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$EditorCss$editorStyle,
				_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$String$join,
					'/',
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$map,
							function (_p26) {
								var _p27 = _p26;
								return _elm_lang$core$Basics$toString(_p27._0);
							},
							function (_) {
								return _.currPath;
							}(model))))),
				A2(
				_elm_lang$html$Html$br,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$class(
						_elm_lang$core$Native_List.fromArray(
							[_user$project$EditorCss$Pane]))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$form,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$textarea,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onInput(_user$project$Editor$Store),
										_elm_lang$html$Html_Attributes$rows(15),
										_elm_lang$html$Html_Attributes$cols(45),
										_user$project$Editor$id(_user$project$EditorCss$Prompt)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										function () {
										var _p28 = function (_) {
											return _.procString;
										}(model);
										if (_p28.ctor === 'Nothing') {
											return _elm_lang$html$Html$text(
												function (_) {
													return _.rawString;
												}(model));
										} else {
											return _elm_lang$html$Html$text(_p28._0);
										}
									}()
									])),
								A2(
								_elm_lang$html$Html$br,
								_elm_lang$core$Native_List.fromArray(
									[]),
								_elm_lang$core$Native_List.fromArray(
									[])),
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Editor$Parse),
										_elm_lang$html$Html_Attributes$type$('reset')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Parse')
									])),
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Editor$Render),
										_elm_lang$html$Html_Attributes$type$('button')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Render')
									])),
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Editor$Debug),
										_elm_lang$html$Html_Attributes$type$('button')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Debug')
									]))
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$id('rightPane'),
						_user$project$Editor$class(
						_elm_lang$core$Native_List.fromArray(
							[_user$project$EditorCss$Pane]))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_user$project$Editor$explorer,
						function (_) {
							return _.page;
						}(model),
						function (_) {
							return _.debug;
						}(model))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$id('console')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						function () {
						var _p29 = function (_) {
							return _.parsedData;
						}(model);
						if (_p29.ctor === 'Err') {
							return _elm_lang$html$Html$text(_p29._0);
						} else {
							return _elm_lang$html$Html$text('parsing complete');
						}
					}()
					])),
				A2(
				_elm_lang$html$Html$br,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				function (_) {
				return _.toRender;
			}(model)
			]));
};
var _user$project$Editor$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: {
				ctor: '_Tuple2',
				_0: _user$project$Editor$init(_user$project$Editor$testinput),
				_1: _elm_lang$core$Platform_Cmd$none
			},
			update: _user$project$Editor$update,
			view: _user$project$Editor$view,
			subscriptions: _user$project$Editor$subscriptions
		})
};
