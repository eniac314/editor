var _user$project$Editor$setHeight = function (winSize) {
	var _p0 = winSize;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[]));
	} else {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'height',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p0._0.height),
						'px')
				}
				]));
	}
};
var _user$project$Editor$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$window$Window$resizes(_user$project$Types$WinSize)
			]));
};
var _user$project$Editor$renderFileIO = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[]);
};
var _user$project$Editor$renderMainMenu = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[]);
};
var _user$project$Editor$move = F2(
	function (f, model) {
		var newPage = function () {
			var _p1 = function (_) {
				return _.page;
			}(model);
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p3 = _p1._0;
				var _p2 = f(_p3);
				if (_p2.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Just(_p3);
				} else {
					return _elm_lang$core$Maybe$Just(_p2._0);
				}
			}
		}();
		var newRstring = function () {
			var _p4 = newPage;
			if (_p4.ctor === 'Nothing') {
				return function (_) {
					return _.rawString;
				}(model);
			} else {
				return _user$project$HtmlZipper$htmlToString(
					_user$project$HtmlZipper$extractTree(_p4._0));
			}
		}();
		var newProcString = _elm_lang$core$Maybe$Just(newRstring);
		var newParsedData = function () {
			var _p5 = newPage;
			if (_p5.ctor === 'Nothing') {
				return _elm_lang$core$Result$Err('wrong Html tree');
			} else {
				return _elm_lang$core$Result$Ok(
					{
						ctor: '_Tuple2',
						_0: _user$project$HtmlZipper$extractTree(_p5._0),
						_1: function (_) {
							return _.nextId;
						}(model)
					});
			}
		}();
		var newRender = _user$project$ElmParser$renderer(newParsedData);
		var newPath = function () {
			var _p6 = newPage;
			if (_p6.ctor === 'Nothing') {
				return function (_) {
					return _.currPath;
				}(model);
			} else {
				return _user$project$HtmlZipper$extractPath(_p6._0);
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			model,
			{rawString: newRstring, procString: newProcString, parsedData: newParsedData, currPath: newPath, page: newPage, toRender: newRender});
	});
var _user$project$Editor$parse = function (model) {
	var pdata = A2(
		_user$project$ElmParser$interpret,
		function (_) {
			return _.rawString;
		}(model),
		function (_) {
			return _.nextId;
		}(model));
	var prString = function () {
		var _p7 = pdata;
		if (_p7.ctor === 'Err') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$htmlToString(_p7._0._0));
		}
	}();
	var newPage = function () {
		var _p8 = pdata;
		if (_p8.ctor === 'Err') {
			return function (_) {
				return _.page;
			}(model);
		} else {
			var _p10 = _p8._0._0;
			var _p9 = function (_) {
				return _.page;
			}(model);
			if (_p9.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					_user$project$HtmlZipper$initZip(_p10));
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$HtmlZipper$updateTag, _p10, _p9._0));
			}
		}
	}();
	var currPath = function () {
		var _p11 = newPage;
		if (_p11.ctor === 'Nothing') {
			return function (_) {
				return _.currPath;
			}(model);
		} else {
			return _user$project$HtmlZipper$extractPath(_p11._0);
		}
	}();
	var nextId = function () {
		var _p12 = pdata;
		if (_p12.ctor === 'Err') {
			return function (_) {
				return _.nextId;
			}(model);
		} else {
			return A2(
				_javcasas$elm_integer$Data_Integer$add,
				_p12._0._1,
				_javcasas$elm_integer$Data_Integer$fromInt(1));
		}
	}();
	return _elm_lang$core$Native_Utils.update(
		model,
		{procString: prString, parsedData: pdata, page: newPage, nextId: nextId, currPath: currPath});
};
var _user$project$Editor$update = F2(
	function (msg, model) {
		var _p13 = msg;
		switch (_p13.ctor) {
			case 'Store':
				var _p14 = _p13._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							rawString: _p14,
							nblines: _elm_lang$core$List$length(
								_elm_lang$core$String$lines(_p14))
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Parse':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$Editor$parse(model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Up':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipUp, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Down':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipDownFirst, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Left':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipLeft, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Right':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipRight, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'GoTo':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(
						_user$project$Editor$move,
						_user$project$HtmlZipper$cd$(_p13._0),
						model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Debug':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							debug: _elm_lang$core$Basics$not(
								function (_) {
									return _.debug;
								}(model))
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Render':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							toRender: _user$project$ElmParser$renderer(
								function (_) {
									return _.parsedData;
								}(model))
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Failure':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'WinSize':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							winSize: _elm_lang$core$Maybe$Just(_p13._0)
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$navigation$Navigation$newUrl(_p13._0)
						]));
		}
	});
var _user$project$Editor$init = function (initInput) {
	var pdata = A2(
		_user$project$ElmParser$interpret,
		initInput,
		_javcasas$elm_integer$Data_Integer$fromInt(0));
	var initPage = function () {
		var _p15 = pdata;
		if (_p15.ctor === 'Err') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$initZip(_p15._0._0));
		}
	}();
	var initPath = function () {
		var _p16 = initPage;
		if (_p16.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			return _user$project$HtmlZipper$extractPath(_p16._0);
		}
	}();
	var nextId = function () {
		var _p17 = pdata;
		if (_p17.ctor === 'Err') {
			return _javcasas$elm_integer$Data_Integer$fromInt(0);
		} else {
			return A2(
				_javcasas$elm_integer$Data_Integer$add,
				_p17._0._1,
				_javcasas$elm_integer$Data_Integer$fromInt(1));
		}
	}();
	return _user$project$Types$Model(_user$project$Types$Editor)(initInput)(_elm_lang$core$Maybe$Nothing)(pdata)(initPath)(initPage)(
		_user$project$ElmParser$renderer(pdata))(nextId)(true)(_elm_lang$core$Maybe$Nothing)(0);
};
var _user$project$Editor$urlUpdate = F2(
	function (res, model) {
		var _p18 = res;
		if (_p18.ctor === 'Err') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{rawString: _p18._0}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{position: _p18._0}),
				_elm_lang$core$Native_List.fromArray(
					[]));
		}
	});
var _user$project$Editor$urlParser = _elm_lang$navigation$Navigation$makeParser(
	function (s) {
		var validUrlMap = _elm_lang$core$Dict$fromList(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: '#mainmenu', _1: _user$project$Types$MainMenu},
					{ctor: '_Tuple2', _0: '#editor', _1: _user$project$Types$Editor},
					{ctor: '_Tuple2', _0: '#fileIO', _1: _user$project$Types$FileIO},
					{ctor: '_Tuple2', _0: '#renderer', _1: _user$project$Types$Renderer}
				]));
		var _p19 = A2(
			_elm_lang$core$Dict$get,
			function (_) {
				return _.hash;
			}(s),
			validUrlMap);
		if (_p19.ctor === 'Nothing') {
			return _elm_lang$core$Result$Err(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid url: ',
					_elm_lang$core$Basics$toString(s)));
		} else {
			return _elm_lang$core$Result$Ok(_p19._0);
		}
	});
var _user$project$Editor$initWinSize = A3(
	_elm_lang$core$Task$perform,
	function (_p20) {
		return _user$project$Types$Failure;
	},
	function (s) {
		return _user$project$Types$WinSize(s);
	},
	_elm_lang$window$Window$size);
var _user$project$Editor$init$ = function (result) {
	var _p21 = A2(
		_user$project$Editor$urlUpdate,
		result,
		_user$project$Editor$init(_user$project$Pad$testinput));
	var m = _p21._0;
	var cmd = _p21._1;
	return {
		ctor: '_Tuple2',
		_0: m,
		_1: _elm_lang$core$Platform_Cmd$batch(
			_elm_lang$core$Native_List.fromArray(
				[
					cmd,
					_user$project$Editor$initWinSize,
					_elm_lang$navigation$Navigation$modifyUrl('#editor')
				]))
	};
};
var _user$project$Editor$_p22 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace('editor');
var _user$project$Editor$id = _user$project$Editor$_p22.id;
var _user$project$Editor$class = _user$project$Editor$_p22.$class;
var _user$project$Editor$classList = _user$project$Editor$_p22.classList;
var _user$project$Editor$renderRenderer = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$Editor$id(_user$project$EditorCss$RendererId)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					function (_) {
					return _.toRender;
				}(model)
				]))
		]);
};
var _user$project$Editor$renderMenu = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Editor$id(_user$project$EditorCss$Menu)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$MainMenu)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#mainmenu'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Main Menu')
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$Editor)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#editor'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Editor')
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$FileIO)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#fileIO'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Save/Load')
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$Renderer)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#renderer'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Html Preview')
					]))
			]));
};
var _user$project$Editor$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Editor$id(_user$project$EditorCss$Container),
				_user$project$Editor$setHeight(
				function (_) {
					return _.winSize;
				}(model))
			]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$EditorCss$editorStyle,
					_user$project$Editor$renderMenu(model)
				]),
			function () {
				var _p23 = function (_) {
					return _.position;
				}(model);
				switch (_p23.ctor) {
					case 'MainMenu':
						return _user$project$Editor$renderMainMenu(model);
					case 'Editor':
						return _user$project$EditorView$renderEditor(model);
					case 'FileIO':
						return _user$project$Editor$renderFileIO(model);
					default:
						return _user$project$Editor$renderRenderer(model);
				}
			}()));
};
var _user$project$Editor$main = {
	main: A2(
		_elm_lang$navigation$Navigation$program,
		_user$project$Editor$urlParser,
		{init: _user$project$Editor$init$, update: _user$project$Editor$update, urlUpdate: _user$project$Editor$urlUpdate, view: _user$project$Editor$view, subscriptions: _user$project$Editor$subscriptions})
};
