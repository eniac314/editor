var _user$project$Editor$testinput4 = ' div []\n      [ h2 [] [text \"first title\"]\n      ] \n  \n  ';
var _user$project$Editor$testinput3 = ' [ class \"mainDiv\" , id \"toto\" ]\n   ';
var _user$project$Editor$testinput2 = ' div [ class \"mainDiv\" , id \"toto\" ]\n           [ text \"hello!\" ]\n\n  ';
var _user$project$Editor$testinput = ' div [ class \"mainDiv\" ]\n          [ p [ style [ ( \"color\" , \"red\" ) ] ] [ text \"this is a test\" \n                  , p [ ] [ ]\n                  ]\n          , p [ ] [ h2 [ id \"very important\" , style [ ( \"color\" , \"blue\" ) ] ] [ text \"big title\" ] ]\n          ]\n\n  ';
var _user$project$Editor$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Editor$inputStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'font-family', _1: 'Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace'},
			{ctor: '_Tuple2', _0: 'width', _1: '40%'}
		]));
var _user$project$Editor$parse = function (model) {
	var pdata = _user$project$ElmParser$interpret(
		function (_) {
			return _.rawString;
		}(model));
	var prString = function () {
		var _p0 = pdata;
		if (_p0.ctor === 'Err') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$htmlToString(_p0._0));
		}
	}();
	var newPage = function () {
		var _p1 = pdata;
		if (_p1.ctor === 'Err') {
			return function (_) {
				return _.page;
			}(model);
		} else {
			var _p3 = _p1._0;
			var _p2 = function (_) {
				return _.page;
			}(model);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					_user$project$HtmlZipper$initZip(_p3));
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$HtmlZipper$updateFocus, _p3, _p2._0));
			}
		}
	}();
	return _elm_lang$core$Native_Utils.update(
		model,
		{procString: prString, parsedData: pdata, page: newPage});
};
var _user$project$Editor$Model = F6(
	function (a, b, c, d, e, f) {
		return {rawString: a, procString: b, parsedData: c, currPath: d, page: e, toRender: f};
	});
var _user$project$Editor$init = function (initInput) {
	var pdata = _user$project$ElmParser$interpret(initInput);
	var initPage = function () {
		var _p4 = pdata;
		if (_p4.ctor === 'Err') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$initZip(_p4._0));
		}
	}();
	var initPath = function () {
		var _p5 = initPage;
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			return _user$project$HtmlZipper$extractPath(_p5._0);
		}
	}();
	return A6(
		_user$project$Editor$Model,
		initInput,
		_elm_lang$core$Maybe$Nothing,
		pdata,
		initPath,
		initPage,
		_user$project$ElmParser$renderer(pdata));
};
var _user$project$Editor$move = F2(
	function (f, model) {
		var newPage = function () {
			var _p6 = function (_) {
				return _.page;
			}(model);
			if (_p6.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p8 = _p6._0;
				var _p7 = f(_p8);
				if (_p7.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Just(_p8);
				} else {
					return _elm_lang$core$Maybe$Just(_p7._0);
				}
			}
		}();
		var newRstring = function () {
			var _p9 = newPage;
			if (_p9.ctor === 'Nothing') {
				return function (_) {
					return _.rawString;
				}(model);
			} else {
				return _user$project$HtmlZipper$htmlToString(
					_user$project$HtmlZipper$extractTree(_p9._0));
			}
		}();
		var newProcString = _elm_lang$core$Maybe$Just(newRstring);
		var newParsedData = function () {
			var _p10 = newPage;
			if (_p10.ctor === 'Nothing') {
				return _elm_lang$core$Result$Err('wrong Html tree');
			} else {
				return _elm_lang$core$Result$Ok(
					_user$project$HtmlZipper$extractTree(_p10._0));
			}
		}();
		var newRender = _user$project$ElmParser$renderer(newParsedData);
		var newPath = function () {
			var _p11 = newPage;
			if (_p11.ctor === 'Nothing') {
				return function (_) {
					return _.currPath;
				}(model);
			} else {
				return _user$project$HtmlZipper$extractPath(_p11._0);
			}
		}();
		return A6(_user$project$Editor$Model, newRstring, newProcString, newParsedData, newPath, newPage, newRender);
	});
var _user$project$Editor$update = F2(
	function (msg, model) {
		var _p12 = msg;
		switch (_p12.ctor) {
			case 'Store':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{rawString: _p12._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Parse':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Editor$parse(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Up':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipUp, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Down':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipDownFirst, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Left':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipLeft, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Right':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Editor$move, _user$project$HtmlZipper$zipRight, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							toRender: _user$project$ElmParser$renderer(
								function (_) {
									return _.parsedData;
								}(model))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Editor$Right = {ctor: 'Right'};
var _user$project$Editor$Left = {ctor: 'Left'};
var _user$project$Editor$Down = {ctor: 'Down'};
var _user$project$Editor$Up = {ctor: 'Up'};
var _user$project$Editor$Render = {ctor: 'Render'};
var _user$project$Editor$Parse = {ctor: 'Parse'};
var _user$project$Editor$Store = function (a) {
	return {ctor: 'Store', _0: a};
};
var _user$project$Editor$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$String$join,
					'/',
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Basics$toString,
							function (_) {
								return _.currPath;
							}(model))))),
				A2(
				_elm_lang$html$Html$form,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$textarea,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onInput(_user$project$Editor$Store),
								_elm_lang$html$Html_Attributes$rows(15),
								_elm_lang$html$Html_Attributes$cols(45),
								_user$project$Editor$inputStyle
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								function () {
								var _p13 = function (_) {
									return _.procString;
								}(model);
								if (_p13.ctor === 'Nothing') {
									return _elm_lang$html$Html$text(
										function (_) {
											return _.rawString;
										}(model));
								} else {
									return _elm_lang$html$Html$text(_p13._0);
								}
							}()
							])),
						A2(
						_elm_lang$html$Html$br,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Editor$Parse),
								_elm_lang$html$Html_Attributes$type$('reset')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Parse')
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Editor$Render),
								_elm_lang$html$Html_Attributes$type$('button')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Render')
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Editor$Up),
								_elm_lang$html$Html_Attributes$type$('reset')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Up')
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Editor$Down),
								_elm_lang$html$Html_Attributes$type$('reset')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Down')
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Editor$Left),
								_elm_lang$html$Html_Attributes$type$('reset')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Left')
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Editor$Right),
								_elm_lang$html$Html_Attributes$type$('reset')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Right')
							]))
					])),
				A2(
				_elm_lang$html$Html$br,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				_elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(
					function (_) {
						return _.parsedData;
					}(model))),
				A2(
				_elm_lang$html$Html$br,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				function (_) {
				return _.toRender;
			}(model)
			]));
};
var _user$project$Editor$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: {
				ctor: '_Tuple2',
				_0: _user$project$Editor$init(_user$project$Editor$testinput),
				_1: _elm_lang$core$Platform_Cmd$none
			},
			update: _user$project$Editor$update,
			view: _user$project$Editor$view,
			subscriptions: _user$project$Editor$subscriptions
		})
};
