var _user$project$Editor$setHeight = function (winSize) {
	var _p0 = winSize;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[]));
	} else {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'height',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p0._0.height),
						'px')
				}
				]));
	}
};
var _user$project$Editor$keyToMsg = function (k) {
	var keys = _elm_lang$core$Dict$fromList(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 112, _1: _user$project$Types$Parse},
				{ctor: '_Tuple2', _0: 113, _1: _user$project$Types$SwapEditorRender}
			]));
	var _p1 = A2(_elm_lang$core$Dict$get, k, keys);
	if (_p1.ctor === 'Nothing') {
		return _user$project$Types$Failure;
	} else {
		return _p1._0;
	}
};
var _user$project$Editor$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$window$Window$resizes(_user$project$Types$WinSize),
				_elm_lang$keyboard$Keyboard$presses(_user$project$Editor$keyToMsg)
			]));
};
var _user$project$Editor$renderFileIO = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[]);
};
var _user$project$Editor$renderMainMenu = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[]);
};
var _user$project$Editor$move = F2(
	function (f, model) {
		var newPage = function () {
			var _p2 = function (_) {
				return _.page;
			}(model);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p4 = _p2._0;
				var _p3 = f(_p4);
				if (_p3.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Just(_p4);
				} else {
					return _elm_lang$core$Maybe$Just(_p3._0);
				}
			}
		}();
		var newRstring = function () {
			var _p5 = newPage;
			if (_p5.ctor === 'Nothing') {
				return function (_) {
					return _.rawString;
				}(model);
			} else {
				return _user$project$HtmlZipper$htmlToString(
					_user$project$HtmlZipper$extractTree(_p5._0));
			}
		}();
		var newProcString = _elm_lang$core$Maybe$Just(newRstring);
		var newParsedData = function () {
			var _p6 = newPage;
			if (_p6.ctor === 'Nothing') {
				return _elm_lang$core$Result$Err('wrong Html tree');
			} else {
				return _elm_lang$core$Result$Ok(
					{
						ctor: '_Tuple2',
						_0: _user$project$HtmlZipper$extractTree(_p6._0),
						_1: function (_) {
							return _.nextId;
						}(model)
					});
			}
		}();
		var newRender = A2(
			_user$project$EditorView$renderer,
			newParsedData,
			function (_) {
				return _.parsedCssData;
			}(model));
		var newPath = function () {
			var _p7 = newPage;
			if (_p7.ctor === 'Nothing') {
				return function (_) {
					return _.currPath;
				}(model);
			} else {
				return _user$project$HtmlZipper$extractPath(_p7._0);
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			model,
			{rawString: newRstring, procString: newProcString, parsedData: newParsedData, currPath: newPath, page: newPage, toRender: newRender});
	});
var _user$project$Editor$parseCss = function (model) {
	var _p8 = function (_) {
		return _.currentPos;
	}(
		function (_) {
			return _.cssExplorer;
		}(model));
	if (_p8.ctor === 'Top') {
		var pCssData = _user$project$CssParser$interpretCss(
			function (_) {
				return _.rawCssString;
			}(model));
		var newProcCssString = function () {
			var _p9 = pCssData;
			if (_p9.ctor === 'Err') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					_user$project$CssParser$toCssString(_p9._0));
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				parsedCssData: pCssData,
				procCssString: newProcCssString,
				toRender: A2(
					_user$project$EditorView$renderer,
					function (_) {
						return _.parsedData;
					}(model),
					pCssData)
			});
	} else {
		var _p24 = _p8._0._1;
		var resPCssData = function (_) {
			return _.parsedCssData;
		}(model);
		var resTmpPCssData = _user$project$CssParser$interpretCss(
			function (_) {
				return _.rawCssString;
			}(model));
		var _p10 = resPCssData;
		if (_p10.ctor === 'Err') {
			return model;
		} else {
			var _p11 = resTmpPCssData;
			if (_p11.ctor === 'Err') {
				return model;
			} else {
				var _p23 = _p11._0;
				var splitAt = F3(
					function (n, acc, xs) {
						splitAt:
						while (true) {
							if (_elm_lang$core$Native_Utils.eq(n, 0)) {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$List$reverse(acc),
									_1: xs
								};
							} else {
								var _p12 = xs;
								if (_p12.ctor === '[]') {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$List$reverse(acc),
										_1: _elm_lang$core$Native_List.fromArray(
											[])
									};
								} else {
									var _v12 = n - 1,
										_v13 = A2(_elm_lang$core$List_ops['::'], _p12._0, acc),
										_v14 = _p12._1;
									n = _v12;
									acc = _v13;
									xs = _v14;
									continue splitAt;
								}
							}
						}
					});
				var insertAt = F2(
					function (xs, toInsert) {
						return A3(
							_elm_lang$core$List$foldl,
							F2(
								function (_p13, acc) {
									var _p14 = _p13;
									var _p16 = _p14._0;
									var _p15 = A3(
										splitAt,
										_p16,
										_elm_lang$core$Native_List.fromArray(
											[]),
										acc);
									var left = _p15._0;
									var right = _p15._1;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										left,
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Native_List.fromArray(
												[
													{ctor: '_Tuple2', _0: _p16, _1: _p14._1}
												]),
											right));
								}),
							xs,
							toInsert);
					});
				var reNumber = F3(
					function (prevPos, next, xs) {
						var _p17 = xs;
						if (_p17.ctor === '[]') {
							return _elm_lang$core$Native_List.fromArray(
								[]);
						} else {
							var _p20 = _p17._1;
							var _p19 = _p17._0._1;
							var _p18 = prevPos;
							if (_p18.ctor === '[]') {
								return A2(
									_elm_lang$core$List_ops['::'],
									{ctor: '_Tuple2', _0: next, _1: _p19},
									A3(
										reNumber,
										_elm_lang$core$Native_List.fromArray(
											[]),
										next + 1,
										_p20));
							} else {
								return A2(
									_elm_lang$core$List_ops['::'],
									{ctor: '_Tuple2', _0: _p18._0, _1: _p19},
									A3(reNumber, _p18._1, next, _p20));
							}
						}
					});
				var nextInd = A2(
					_elm_lang$core$Maybe$withDefault,
					0,
					_elm_lang$core$List$head(_p24));
				var tmpPCssDataList = A3(
					reNumber,
					_elm_lang$core$List$reverse(_p24),
					nextInd,
					_elm_lang$core$Dict$toList(
						function (_) {
							return _.cssDict;
						}(_p23)));
				var newPCssDataList = A2(
					_elm_lang$core$List$map,
					function (_p21) {
						var _p22 = _p21;
						return _elm_lang$core$Maybe$Just(_p22._1);
					},
					function (xs) {
						return A2(insertAt, xs, tmpPCssDataList);
					}(
						_elm_lang$core$Dict$toList(
							function (d) {
								return A3(
									_elm_lang$core$List$foldl,
									F2(
										function (k, acc) {
											return A2(_elm_lang$core$Dict$remove, k, acc);
										}),
									d,
									_p24);
							}(
								function (_) {
									return _.cssDict;
								}(_p10._0)))));
				var newPCssData = _user$project$CssParser$interpretCss(
					_user$project$CssParser$nodesToCssString(newPCssDataList));
				var newProcCssString = _elm_lang$core$Maybe$Just(
					_user$project$CssParser$toCssString(_p23));
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						parsedCssData: newPCssData,
						procCssString: newProcCssString,
						toRender: A2(
							_user$project$EditorView$renderer,
							function (_) {
								return _.parsedData;
							}(model),
							newPCssData)
					});
			}
		}
	}
};
var _user$project$Editor$parse = function (model) {
	var pdata = A2(
		_user$project$ElmParser$interpret,
		function (_) {
			return _.rawString;
		}(model),
		function (_) {
			return _.nextId;
		}(model));
	var prString = function () {
		var _p25 = pdata;
		if (_p25.ctor === 'Err') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_user$project$HtmlZipper$htmlToString(_p25._0._0));
		}
	}();
	var newPage = function () {
		var _p26 = pdata;
		if (_p26.ctor === 'Err') {
			return function (_) {
				return _.page;
			}(model);
		} else {
			var _p28 = _p26._0._0;
			var _p27 = function (_) {
				return _.page;
			}(model);
			if (_p27.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					_user$project$HtmlZipper$initZip(_p28));
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$HtmlZipper$updateTag, _p28, _p27._0));
			}
		}
	}();
	var currPath = function () {
		var _p29 = newPage;
		if (_p29.ctor === 'Nothing') {
			return function (_) {
				return _.currPath;
			}(model);
		} else {
			return _user$project$HtmlZipper$extractPath(_p29._0);
		}
	}();
	var nextId = function () {
		var _p30 = pdata;
		if (_p30.ctor === 'Err') {
			return function (_) {
				return _.nextId;
			}(model);
		} else {
			return A2(
				_javcasas$elm_integer$Data_Integer$add,
				_p30._0._1,
				_javcasas$elm_integer$Data_Integer$fromInt(1));
		}
	}();
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			procString: prString,
			parsedData: pdata,
			page: newPage,
			nextId: nextId,
			currPath: currPath,
			toRender: A2(
				_user$project$EditorView$renderer,
				pdata,
				function (_) {
					return _.parsedCssData;
				}(model))
		});
};
var _user$project$Editor$swapEditorRender = function (model) {
	var _p31 = function (_) {
		return _.position;
	}(model);
	switch (_p31.ctor) {
		case 'Editor':
			return A3(
				_elm_lang$core$Task$perform,
				function (_p32) {
					return _user$project$Types$Failure;
				},
				function (url) {
					return _user$project$Types$ChangeUrl(url);
				},
				_elm_lang$core$Task$succeed('#renderer'));
		case 'Renderer':
			return A3(
				_elm_lang$core$Task$perform,
				function (_p33) {
					return _user$project$Types$Failure;
				},
				function (url) {
					return _user$project$Types$ChangeUrl(url);
				},
				_elm_lang$core$Task$succeed('#editor'));
		default:
			return _elm_lang$core$Platform_Cmd$none;
	}
};
var _user$project$Editor$changeDict = F2(
	function (model, d) {
		var explorer = function (_) {
			return _.cssExplorer;
		}(model);
		var newExplorer = _elm_lang$core$Native_Utils.update(
			explorer,
			{currentDict: d});
		return _elm_lang$core$Native_Utils.update(
			model,
			{cssExplorer: newExplorer});
	});
var _user$project$Editor$filterCss = F2(
	function (model, _p34) {
		var _p35 = _p34;
		var _p37 = _p35._1;
		var _p36 = function (_) {
			return _.parsedCssData;
		}(model);
		if (_p36.ctor === 'Err') {
			return model;
		} else {
			var explorer = function (_) {
				return _.cssExplorer;
			}(model);
			var newExplorer = _elm_lang$core$Native_Utils.update(
				explorer,
				{
					currentPos: _user$project$Types$InDict(
						{ctor: '_Tuple2', _0: _p35._0, _1: _p37})
				});
			var dict = function (_) {
				return _.cssDict;
			}(_p36._0);
			var values = A2(
				_elm_lang$core$List$map,
				function (id) {
					return A2(_elm_lang$core$Dict$get, id, dict);
				},
				_p37);
			var newProcString = _user$project$CssParser$nodesToCssString(
				_elm_lang$core$List$reverse(values));
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					procCssString: _elm_lang$core$Maybe$Just(newProcString),
					cssExplorer: newExplorer
				});
		}
	});
var _user$project$Editor$goToCssTop = function (model) {
	var _p38 = function (_) {
		return _.parsedCssData;
	}(model);
	if (_p38.ctor === 'Err') {
		return model;
	} else {
		var _p39 = _p38._0;
		var explorer = function (_) {
			return _.cssExplorer;
		}(model);
		var newExplorer = _elm_lang$core$Native_Utils.update(
			explorer,
			{currentPos: _user$project$Types$Top});
		var newProcCssString = _elm_lang$core$Maybe$Just(
			_user$project$CssParser$toCssString(_p39));
		var dict = function (_) {
			return _.cssDict;
		}(_p39);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				cssExplorer: newExplorer,
				procCssString: newProcCssString,
				toRender: A2(
					_user$project$EditorView$renderer,
					function (_) {
						return _.parsedData;
					}(model),
					_elm_lang$core$Result$Ok(_p39))
			});
	}
};
var _user$project$Editor$update = F2(
	function (msg, model) {
		var _p40 = msg;
		switch (_p40.ctor) {
			case 'Store':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{rawString: _p40._0}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'StoreCss':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{rawCssString: _p40._0}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Parse':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$Editor$parse(model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'ParseCss':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$Editor$parseCss(model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Up':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipUp, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Down':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipDownFirst, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Left':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipLeft, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Right':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$move, _user$project$HtmlZipper$zipRight, model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'GoTo':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(
						_user$project$Editor$move,
						_user$project$HtmlZipper$cd$(_p40._0),
						model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Debug':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							debug: _elm_lang$core$Basics$not(
								function (_) {
									return _.debug;
								}(model))
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Failure':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'WinSize':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							winSize: _elm_lang$core$Maybe$Just(_p40._0)
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'ChangeUrl':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$navigation$Navigation$newUrl(_p40._0)
						]));
			case 'ChangeDict':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Editor$changeDict, model, _p40._0),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'SwapEditorRender':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[
							_user$project$Editor$swapEditorRender(model)
						]));
			case 'GoToCssTop':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$Editor$goToCssTop(model),
					_elm_lang$core$Native_List.fromArray(
						[]));
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(
						_user$project$Editor$filterCss,
						model,
						{ctor: '_Tuple2', _0: _p40._0._0, _1: _p40._0._1}),
					_elm_lang$core$Native_List.fromArray(
						[]));
		}
	});
var _user$project$Editor$init = F2(
	function (initInput, initCssInput) {
		var pCssData = _user$project$CssParser$interpretCss(initCssInput);
		var pdata = A2(
			_user$project$ElmParser$interpret,
			initInput,
			_javcasas$elm_integer$Data_Integer$fromInt(0));
		var initPage = function () {
			var _p41 = pdata;
			if (_p41.ctor === 'Err') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					_user$project$HtmlZipper$initZip(_p41._0._0));
			}
		}();
		var initPath = function () {
			var _p42 = initPage;
			if (_p42.ctor === 'Nothing') {
				return _elm_lang$core$Native_List.fromArray(
					[]);
			} else {
				return _user$project$HtmlZipper$extractPath(_p42._0);
			}
		}();
		var nextId = function () {
			var _p43 = pdata;
			if (_p43.ctor === 'Err') {
				return _javcasas$elm_integer$Data_Integer$fromInt(0);
			} else {
				return A2(
					_javcasas$elm_integer$Data_Integer$add,
					_p43._0._1,
					_javcasas$elm_integer$Data_Integer$fromInt(1));
			}
		}();
		return _user$project$Types$Model(_user$project$Types$Editor)(initInput)(initCssInput)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(pdata)(pCssData)(initPath)(
			A2(_user$project$Types$CssExplorer, _user$project$Types$Top, _user$project$Types$CssClass))(initPage)(
			A2(_user$project$EditorView$renderer, pdata, pCssData))(nextId)(true)(_elm_lang$core$Maybe$Nothing);
	});
var _user$project$Editor$urlUpdate = F2(
	function (res, model) {
		var _p44 = res;
		if (_p44.ctor === 'Err') {
			return {
				ctor: '_Tuple2',
				_0: model,
				_1: A3(
					_elm_lang$core$Task$perform,
					function (_p45) {
						return _user$project$Types$Failure;
					},
					function (url) {
						return _user$project$Types$ChangeUrl(url);
					},
					_elm_lang$core$Task$succeed('#editor'))
			};
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{position: _p44._0}),
				_elm_lang$core$Native_List.fromArray(
					[]));
		}
	});
var _user$project$Editor$urlParser = _elm_lang$navigation$Navigation$makeParser(
	function (s) {
		var validUrlMap = _elm_lang$core$Dict$fromList(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: '#mainmenu', _1: _user$project$Types$MainMenu},
					{ctor: '_Tuple2', _0: '#editor', _1: _user$project$Types$Editor},
					{ctor: '_Tuple2', _0: '#fileIO', _1: _user$project$Types$FileIO},
					{ctor: '_Tuple2', _0: '#renderer', _1: _user$project$Types$Renderer}
				]));
		var _p46 = A2(
			_elm_lang$core$Dict$get,
			function (_) {
				return _.hash;
			}(s),
			validUrlMap);
		if (_p46.ctor === 'Nothing') {
			return _elm_lang$core$Result$Err(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid url: ',
					_elm_lang$core$Basics$toString(s)));
		} else {
			return _elm_lang$core$Result$Ok(_p46._0);
		}
	});
var _user$project$Editor$initWinSize = A3(
	_elm_lang$core$Task$perform,
	function (_p47) {
		return _user$project$Types$Failure;
	},
	function (s) {
		return _user$project$Types$WinSize(s);
	},
	_elm_lang$window$Window$size);
var _user$project$Editor$init$ = function (result) {
	var _p48 = A2(
		_user$project$Editor$urlUpdate,
		result,
		A2(_user$project$Editor$init, _user$project$Pad$testinput5, _user$project$Pad$initCss2));
	var m = _p48._0;
	var cmd = _p48._1;
	return {
		ctor: '_Tuple2',
		_0: m,
		_1: _elm_lang$core$Platform_Cmd$batch(
			_elm_lang$core$Native_List.fromArray(
				[
					cmd,
					_user$project$Editor$initWinSize,
					_elm_lang$navigation$Navigation$modifyUrl('#editor')
				]))
	};
};
var _user$project$Editor$_p49 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace('editor');
var _user$project$Editor$id = _user$project$Editor$_p49.id;
var _user$project$Editor$class = _user$project$Editor$_p49.$class;
var _user$project$Editor$classList = _user$project$Editor$_p49.classList;
var _user$project$Editor$renderRenderer = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$Editor$id(_user$project$EditorCss$RendererId)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					function (_) {
					return _.toRender;
				}(model)
				]))
		]);
};
var _user$project$Editor$renderMenu = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Editor$id(_user$project$EditorCss$Menu)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$MainMenu)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#mainmenu'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Main Menu')
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$Editor)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#editor'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Editor')
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$FileIO)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#fileIO'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Save/Load')
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Editor$classList(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'CurrentPos',
								_1: _elm_lang$core$Native_Utils.eq(
									function (_) {
										return _.position;
									}(model),
									_user$project$Types$Renderer)
							}
							])),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Types$ChangeUrl('#renderer'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Html Preview')
					]))
			]));
};
var _user$project$Editor$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Editor$id(_user$project$EditorCss$Container),
				_user$project$Editor$setHeight(
				function (_) {
					return _.winSize;
				}(model))
			]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$EditorCss$editorStyle,
					_user$project$Editor$renderMenu(model)
				]),
			function () {
				var _p50 = function (_) {
					return _.position;
				}(model);
				switch (_p50.ctor) {
					case 'MainMenu':
						return _user$project$Editor$renderMainMenu(model);
					case 'Editor':
						return _user$project$EditorView$renderEditor(model);
					case 'FileIO':
						return _user$project$Editor$renderFileIO(model);
					default:
						return _user$project$Editor$renderRenderer(model);
				}
			}()));
};
var _user$project$Editor$main = {
	main: A2(
		_elm_lang$navigation$Navigation$program,
		_user$project$Editor$urlParser,
		{init: _user$project$Editor$init$, update: _user$project$Editor$update, urlUpdate: _user$project$Editor$urlUpdate, view: _user$project$Editor$view, subscriptions: _user$project$Editor$subscriptions})
};
