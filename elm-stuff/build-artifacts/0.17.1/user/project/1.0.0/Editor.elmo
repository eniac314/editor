var _user$project$Editor$testinput4 = ' div []\n      [ h2 [] [text \"first title\"]\n      ] \n  \n  ';
var _user$project$Editor$testinput3 = ' [ class \"mainDiv\" , id \"toto\" ]\n   ';
var _user$project$Editor$testinput2 = ' div [ class \"mainDiv\" , id \"toto\" ]\n           [ text \"hello!\" ]\n\n  ';
var _user$project$Editor$testinput = ' div [ class \"mainDiv\" ]\n          [ p [ style [ ( \"color\" , \"red\" ) ] ] [ text \"this is a test\" \n                  , p [ ] [ ]\n                  ]\n          , p [ ] [ h2 [ id \"very important\" , style [ ( \"color\" , \"blue\" ) ] ] [ text \"big title\" ] ]\n          ]\n\n  ';
var _user$project$Editor$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Editor$inputStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'font-family', _1: 'Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace'},
			{ctor: '_Tuple2', _0: 'width', _1: '40%'}
		]));
var _user$project$Editor$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Store':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{rawString: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Parse':
				var pdata = _user$project$ElmParser$interpret(
					function (_) {
						return _.rawString;
					}(model));
				var prString = function () {
					var _p1 = pdata;
					if (_p1.ctor === 'Err') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Just(
							_user$project$HtmlZipper$htmlToString(_p1._0));
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{parsedData: pdata, procString: prString}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							toRender: _user$project$ElmParser$renderer(
								function (_) {
									return _.parsedData;
								}(model))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Editor$Model = F4(
	function (a, b, c, d) {
		return {rawString: a, procString: b, parsedData: c, toRender: d};
	});
var _user$project$Editor$Render = {ctor: 'Render'};
var _user$project$Editor$Parse = {ctor: 'Parse'};
var _user$project$Editor$Store = function (a) {
	return {ctor: 'Store', _0: a};
};
var _user$project$Editor$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$form,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$textarea,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onInput(_user$project$Editor$Store),
								_elm_lang$html$Html_Attributes$rows(15),
								_elm_lang$html$Html_Attributes$cols(45),
								_user$project$Editor$inputStyle
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								function () {
								var _p2 = function (_) {
									return _.procString;
								}(model);
								if (_p2.ctor === 'Nothing') {
									return _elm_lang$html$Html$text(
										function (_) {
											return _.rawString;
										}(model));
								} else {
									return _elm_lang$html$Html$text(_p2._0);
								}
							}()
							])),
						A2(
						_elm_lang$html$Html$br,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Editor$Parse),
								_elm_lang$html$Html_Attributes$type$('reset')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Parse')
							]))
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Editor$Render)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Render')
					])),
				A2(
				_elm_lang$html$Html$br,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				_elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(
					function (_) {
						return _.parsedData;
					}(model))),
				A2(
				_elm_lang$html$Html$br,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				function (_) {
				return _.toRender;
			}(model)
			]));
};
var _user$project$Editor$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: {
				ctor: '_Tuple2',
				_0: A4(
					_user$project$Editor$Model,
					_user$project$Editor$testinput,
					_elm_lang$core$Maybe$Nothing,
					_elm_lang$core$Result$Err('nothing yet'),
					_elm_lang$html$Html$text('')),
				_1: _elm_lang$core$Platform_Cmd$none
			},
			update: _user$project$Editor$update,
			view: _user$project$Editor$view,
			subscriptions: _user$project$Editor$subscriptions
		})
};
